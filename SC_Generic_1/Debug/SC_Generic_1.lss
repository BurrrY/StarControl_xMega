
SC_Generic_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  00802000  00001c2e  00001cc2  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c2  008020cc  008020cc  00001d90  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000340  00000000  00000000  00001dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005b08  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015f9  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000050ef  00000000  00000000  00009201  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000070c  00000000  00000000  0000e2f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002ced6  00000000  00000000  0000e9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001e17  00000000  00000000  0003b8d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d8  00000000  00000000  0003d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000288a  00000000  00000000  0003d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__bad_interrupt>
      66:	00 00       	nop
      68:	ed c0       	rjmp	.+474    	; 0x244 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_125>
     1f8:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_126>
     1fc:	bd 06       	cpc	r11, r29
     1fe:	ab 06       	cpc	r10, r27
     200:	ae 06       	cpc	r10, r30
     202:	b1 06       	cpc	r11, r17
     204:	b4 06       	cpc	r11, r20
     206:	b7 06       	cpc	r11, r23
     208:	ba 06       	cpc	r11, r26

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	ee e2       	ldi	r30, 0x2E	; 46
     21e:	fc e1       	ldi	r31, 0x1C	; 28
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	ac 3c       	cpi	r26, 0xCC	; 204
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	21 e2       	ldi	r18, 0x21	; 33
     22e:	ac ec       	ldi	r26, 0xCC	; 204
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	ae 38       	cpi	r26, 0x8E	; 142
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <main>
     240:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
	return 0;
}
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	08 95       	ret

0000024a <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     24a:	30 91 78 21 	lds	r19, 0x2178
     24e:	20 91 79 21 	lds	r18, 0x2179
     252:	82 2f       	mov	r24, r18
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	03 97       	sbiw	r24, 0x03	; 3
     258:	e1 f4       	brne	.+56     	; 0x292 <udi_hid_generic_setreport+0x48>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     25a:	31 11       	cpse	r19, r1
     25c:	1c c0       	rjmp	.+56     	; 0x296 <udi_hid_generic_setreport+0x4c>
			&& (sizeof(udi_hid_generic_report_feature) ==
     25e:	80 91 7c 21 	lds	r24, 0x217C
     262:	90 91 7d 21 	lds	r25, 0x217D
     266:	04 97       	sbiw	r24, 0x04	; 4
     268:	c1 f4       	brne	.+48     	; 0x29a <udi_hid_generic_setreport+0x50>
					udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     26a:	8c ec       	ldi	r24, 0xCC	; 204
     26c:	90 e2       	ldi	r25, 0x20	; 32
     26e:	80 93 7e 21 	sts	0x217E, r24
     272:	90 93 7f 21 	sts	0x217F, r25
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     276:	86 e8       	ldi	r24, 0x86	; 134
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	80 93 82 21 	sts	0x2182, r24
     27e:	90 93 83 21 	sts	0x2183, r25
		udd_g_ctrlreq.payload_size =
     282:	84 e0       	ldi	r24, 0x04	; 4
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	80 93 80 21 	sts	0x2180, r24
     28a:	90 93 81 21 	sts	0x2181, r25
				sizeof(udi_hid_generic_report_feature);
		return true;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	08 95       	ret
	}
	return false;
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	08 95       	ret
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	08 95       	ret
     29a:	80 e0       	ldi	r24, 0x00	; 0
}
     29c:	08 95       	ret

0000029e <udi_hid_generic_report_in_sent>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	80 93 d6 20 	sts	0x20D6, r24
     2a4:	08 95       	ret

000002a6 <udi_hid_generic_report_out_enable>:
	udi_hid_generic_report_out_enable();
}


static bool udi_hid_generic_report_out_enable(void)
{
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     2aa:	0e e6       	ldi	r16, 0x6E	; 110
     2ac:	11 e0       	ldi	r17, 0x01	; 1
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 ed       	ldi	r20, 0xD0	; 208
     2b4:	50 e2       	ldi	r21, 0x20	; 32
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	0e 94 93 09 	call	0x1326	; 0x1326 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
     2be:	1f 91       	pop	r17
     2c0:	0f 91       	pop	r16
     2c2:	08 95       	ret

000002c4 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     2c4:	10 92 da 20 	sts	0x20DA, r1
	udi_hid_generic_protocol = 0;
     2c8:	10 92 d8 20 	sts	0x20D8, r1
	udi_hid_generic_b_report_in_free = true;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 d6 20 	sts	0x20D6, r24
	if (!udi_hid_generic_report_out_enable())
     2d2:	e9 df       	rcall	.-46     	; 0x2a6 <udi_hid_generic_report_out_enable>
     2d4:	81 11       	cpse	r24, r1
		return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     2d6:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <my_callback_generic_enable>
}
     2da:	08 95       	ret

000002dc <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
     2dc:	81 11       	cpse	r24, r1
     2de:	07 c0       	rjmp	.+14     	; 0x2ee <udi_hid_generic_report_out_received+0x12>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     2e0:	67 2b       	or	r22, r23
     2e2:	21 f4       	brne	.+8      	; 0x2ec <udi_hid_generic_report_out_received+0x10>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     2e4:	80 ed       	ldi	r24, 0xD0	; 208
     2e6:	90 e2       	ldi	r25, 0x20	; 32
     2e8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <my_callback_generic_report_out>
	}
	udi_hid_generic_report_out_enable();
     2ec:	dc cf       	rjmp	.-72     	; 0x2a6 <udi_hid_generic_report_out_enable>
     2ee:	08 95       	ret

000002f0 <udi_hid_generic_disable>:
}


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     2f0:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <my_callback_generic_disable>
     2f4:	08 95       	ret

000002f6 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     2f6:	25 e2       	ldi	r18, 0x25	; 37
     2f8:	31 e0       	ldi	r19, 0x01	; 1
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	50 e2       	ldi	r21, 0x20	; 32
     2fe:	68 ed       	ldi	r22, 0xD8	; 216
     300:	70 e2       	ldi	r23, 0x20	; 32
     302:	8a ed       	ldi	r24, 0xDA	; 218
     304:	90 e2       	ldi	r25, 0x20	; 32
     306:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     30a:	08 95       	ret

0000030c <udi_hid_generic_setfeature_valid>:
//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     30c:	80 91 80 21 	lds	r24, 0x2180
     310:	90 91 81 21 	lds	r25, 0x2181
     314:	04 97       	sbiw	r24, 0x04	; 4
     316:	21 f4       	brne	.+8      	; 0x320 <udi_hid_generic_setfeature_valid+0x14>
		return;	// Bad data
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     318:	8c ec       	ldi	r24, 0xCC	; 204
     31a:	90 e2       	ldi	r25, 0x20	; 32
     31c:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <my_callback_generic_set_feature>
     320:	08 95       	ret

00000322 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
	if (!udi_hid_generic_b_report_in_free)
     328:	20 91 d6 20 	lds	r18, 0x20D6
     32c:	22 23       	and	r18, r18
     32e:	21 f1       	breq	.+72     	; 0x378 <udi_hid_generic_send_report_in+0x56>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     330:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
     332:	f8 94       	cli
		return false;
	irqflags_t flags = cpu_irq_save();
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     334:	26 e0       	ldi	r18, 0x06	; 6
     336:	e0 ed       	ldi	r30, 0xD0	; 208
     338:	f0 e2       	ldi	r31, 0x20	; 32
     33a:	df 01       	movw	r26, r30
     33c:	1d 92       	st	X+, r1
     33e:	2a 95       	dec	r18
     340:	e9 f7       	brne	.-6      	; 0x33c <udi_hid_generic_send_report_in+0x1a>
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     342:	26 e0       	ldi	r18, 0x06	; 6
     344:	fc 01       	movw	r30, r24
     346:	a0 ed       	ldi	r26, 0xD0	; 208
     348:	b0 e2       	ldi	r27, 0x20	; 32
     34a:	01 90       	ld	r0, Z+
     34c:	0d 92       	st	X+, r0
     34e:	2a 95       	dec	r18
     350:	e1 f7       	brne	.-8      	; 0x34a <udi_hid_generic_send_report_in+0x28>
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     352:	0f e4       	ldi	r16, 0x4F	; 79
     354:	11 e0       	ldi	r17, 0x01	; 1
     356:	26 e0       	ldi	r18, 0x06	; 6
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 ed       	ldi	r20, 0xD0	; 208
     35c:	50 e2       	ldi	r21, 0x20	; 32
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	81 e8       	ldi	r24, 0x81	; 129
     362:	e1 d7       	rcall	.+4034   	; 0x1326 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	89 27       	eor	r24, r25
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
     368:	80 93 d6 20 	sts	0x20D6, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     36c:	cf bf       	out	0x3f, r28	; 63
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;
     36e:	90 91 d6 20 	lds	r25, 0x20D6
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	89 27       	eor	r24, r25
     376:	01 c0       	rjmp	.+2      	; 0x37a <udi_hid_generic_send_report_in+0x58>
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
	if (!udi_hid_generic_b_report_in_free)
		return false;
     378:	80 e0       	ldi	r24, 0x00	; 0
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
	cpu_irq_restore(flags);
	return !udi_hid_generic_b_report_in_free;

}
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	08 95       	ret

00000382 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     382:	e0 91 e1 20 	lds	r30, 0x20E1
     386:	f0 91 e2 20 	lds	r31, 0x20E2
     38a:	01 90       	ld	r0, Z+
     38c:	f0 81       	ld	r31, Z
     38e:	e0 2d       	mov	r30, r0
     390:	22 81       	ldd	r18, Z+2	; 0x02
     392:	33 81       	ldd	r19, Z+3	; 0x03
     394:	2e 0f       	add	r18, r30
     396:	3f 1f       	adc	r19, r31
     398:	fc 01       	movw	r30, r24
     39a:	40 81       	ld	r20, Z
     39c:	e4 0f       	add	r30, r20
     39e:	f1 1d       	adc	r31, r1
     3a0:	e2 17       	cp	r30, r18
     3a2:	f3 07       	cpc	r31, r19
     3a4:	a0 f4       	brcc	.+40     	; 0x3ce <udc_next_desc_in_iface+0x4c>
     3a6:	81 81       	ldd	r24, Z+1	; 0x01
     3a8:	84 30       	cpi	r24, 0x04	; 4
     3aa:	a1 f0       	breq	.+40     	; 0x3d4 <udc_next_desc_in_iface+0x52>
     3ac:	86 13       	cpse	r24, r22
     3ae:	06 c0       	rjmp	.+12     	; 0x3bc <udc_next_desc_in_iface+0x3a>
     3b0:	14 c0       	rjmp	.+40     	; 0x3da <udc_next_desc_in_iface+0x58>
     3b2:	81 81       	ldd	r24, Z+1	; 0x01
     3b4:	84 30       	cpi	r24, 0x04	; 4
     3b6:	a1 f0       	breq	.+40     	; 0x3e0 <udc_next_desc_in_iface+0x5e>
     3b8:	86 17       	cp	r24, r22
     3ba:	a9 f0       	breq	.+42     	; 0x3e6 <udc_next_desc_in_iface+0x64>
     3bc:	80 81       	ld	r24, Z
     3be:	e8 0f       	add	r30, r24
     3c0:	f1 1d       	adc	r31, r1
     3c2:	e2 17       	cp	r30, r18
     3c4:	f3 07       	cpc	r31, r19
     3c6:	a8 f3       	brcs	.-22     	; 0x3b2 <udc_next_desc_in_iface+0x30>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	08 95       	ret
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	08 95       	ret
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	08 95       	ret
     3da:	8e 2f       	mov	r24, r30
     3dc:	9f 2f       	mov	r25, r31
     3de:	08 95       	ret
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	08 95       	ret
     3e6:	8e 2f       	mov	r24, r30
     3e8:	9f 2f       	mov	r25, r31
     3ea:	08 95       	ret

000003ec <udc_valid_address>:
     3ec:	80 91 78 21 	lds	r24, 0x2178
     3f0:	8f 77       	andi	r24, 0x7F	; 127
     3f2:	e4 c6       	rjmp	.+3528   	; 0x11bc <udd_set_address>
     3f4:	08 95       	ret

000003f6 <udc_update_iface_desc>:
     3f6:	90 91 e3 20 	lds	r25, 0x20E3
     3fa:	99 23       	and	r25, r25
     3fc:	81 f1       	breq	.+96     	; 0x45e <udc_update_iface_desc+0x68>
     3fe:	e0 91 e1 20 	lds	r30, 0x20E1
     402:	f0 91 e2 20 	lds	r31, 0x20E2
     406:	01 90       	ld	r0, Z+
     408:	f0 81       	ld	r31, Z
     40a:	e0 2d       	mov	r30, r0
     40c:	94 81       	ldd	r25, Z+4	; 0x04
     40e:	89 17       	cp	r24, r25
     410:	40 f5       	brcc	.+80     	; 0x462 <udc_update_iface_desc+0x6c>
     412:	e0 93 df 20 	sts	0x20DF, r30
     416:	f0 93 e0 20 	sts	0x20E0, r31
     41a:	22 81       	ldd	r18, Z+2	; 0x02
     41c:	33 81       	ldd	r19, Z+3	; 0x03
     41e:	2e 0f       	add	r18, r30
     420:	3f 1f       	adc	r19, r31
     422:	e2 17       	cp	r30, r18
     424:	f3 07       	cpc	r31, r19
     426:	f8 f4       	brcc	.+62     	; 0x466 <udc_update_iface_desc+0x70>
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	94 30       	cpi	r25, 0x04	; 4
     42c:	61 f4       	brne	.+24     	; 0x446 <udc_update_iface_desc+0x50>
     42e:	92 81       	ldd	r25, Z+2	; 0x02
     430:	98 13       	cpse	r25, r24
     432:	09 c0       	rjmp	.+18     	; 0x446 <udc_update_iface_desc+0x50>
     434:	93 81       	ldd	r25, Z+3	; 0x03
     436:	96 13       	cpse	r25, r22
     438:	06 c0       	rjmp	.+12     	; 0x446 <udc_update_iface_desc+0x50>
     43a:	e0 93 df 20 	sts	0x20DF, r30
     43e:	f0 93 e0 20 	sts	0x20E0, r31
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	08 95       	ret
     446:	90 81       	ld	r25, Z
     448:	e9 0f       	add	r30, r25
     44a:	f1 1d       	adc	r31, r1
     44c:	e2 17       	cp	r30, r18
     44e:	f3 07       	cpc	r31, r19
     450:	58 f3       	brcs	.-42     	; 0x428 <udc_update_iface_desc+0x32>
     452:	e0 93 df 20 	sts	0x20DF, r30
     456:	f0 93 e0 20 	sts	0x20E0, r31
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 95       	ret
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	08 95       	ret
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	08 95       	ret
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	08 95       	ret

0000046a <udc_iface_disable>:
     46a:	ff 92       	push	r15
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	c8 2f       	mov	r28, r24
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	be df       	rcall	.-132    	; 0x3f6 <udc_update_iface_desc>
     47a:	f8 2e       	mov	r15, r24
     47c:	88 23       	and	r24, r24
     47e:	79 f1       	breq	.+94     	; 0x4de <udc_iface_disable+0x74>
     480:	a0 91 e1 20 	lds	r26, 0x20E1
     484:	b0 91 e2 20 	lds	r27, 0x20E2
     488:	ec 2f       	mov	r30, r28
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	ee 0f       	add	r30, r30
     48e:	ff 1f       	adc	r31, r31
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	2d 91       	ld	r18, X+
     494:	3c 91       	ld	r19, X
     496:	13 97       	sbiw	r26, 0x03	; 3
     498:	e2 0f       	add	r30, r18
     49a:	f3 1f       	adc	r31, r19
     49c:	00 81       	ld	r16, Z
     49e:	11 81       	ldd	r17, Z+1	; 0x01
     4a0:	d8 01       	movw	r26, r16
     4a2:	16 96       	adiw	r26, 0x06	; 6
     4a4:	ed 91       	ld	r30, X+
     4a6:	fc 91       	ld	r31, X
     4a8:	17 97       	sbiw	r26, 0x07	; 7
     4aa:	09 95       	icall
     4ac:	68 2f       	mov	r22, r24
     4ae:	8c 2f       	mov	r24, r28
     4b0:	a2 df       	rcall	.-188    	; 0x3f6 <udc_update_iface_desc>
     4b2:	f8 2e       	mov	r15, r24
     4b4:	88 23       	and	r24, r24
     4b6:	99 f0       	breq	.+38     	; 0x4de <udc_iface_disable+0x74>
     4b8:	c0 91 df 20 	lds	r28, 0x20DF
     4bc:	d0 91 e0 20 	lds	r29, 0x20E0
     4c0:	65 e0       	ldi	r22, 0x05	; 5
     4c2:	ce 01       	movw	r24, r28
     4c4:	5e df       	rcall	.-324    	; 0x382 <udc_next_desc_in_iface>
     4c6:	ec 01       	movw	r28, r24
     4c8:	00 97       	sbiw	r24, 0x00	; 0
     4ca:	19 f0       	breq	.+6      	; 0x4d2 <udc_iface_disable+0x68>
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	eb d7       	rcall	.+4054   	; 0x14a6 <udd_ep_free>
     4d0:	f7 cf       	rjmp	.-18     	; 0x4c0 <udc_iface_disable+0x56>
     4d2:	d8 01       	movw	r26, r16
     4d4:	12 96       	adiw	r26, 0x02	; 2
     4d6:	ed 91       	ld	r30, X+
     4d8:	fc 91       	ld	r31, X
     4da:	13 97       	sbiw	r26, 0x03	; 3
     4dc:	09 95       	icall
     4de:	8f 2d       	mov	r24, r15
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	08 95       	ret

000004ec <udc_iface_enable>:
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	18 2f       	mov	r17, r24
     4f4:	80 df       	rcall	.-256    	; 0x3f6 <udc_update_iface_desc>
     4f6:	88 23       	and	r24, r24
     4f8:	39 f1       	breq	.+78     	; 0x548 <udc_iface_enable+0x5c>
     4fa:	c0 91 df 20 	lds	r28, 0x20DF
     4fe:	d0 91 e0 20 	lds	r29, 0x20E0
     502:	65 e0       	ldi	r22, 0x05	; 5
     504:	ce 01       	movw	r24, r28
     506:	3d df       	rcall	.-390    	; 0x382 <udc_next_desc_in_iface>
     508:	ec 01       	movw	r28, r24
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	41 f0       	breq	.+16     	; 0x51e <udc_iface_enable+0x32>
     50e:	4c 81       	ldd	r20, Y+4	; 0x04
     510:	5d 81       	ldd	r21, Y+5	; 0x05
     512:	6b 81       	ldd	r22, Y+3	; 0x03
     514:	8a 81       	ldd	r24, Y+2	; 0x02
     516:	61 d6       	rcall	.+3266   	; 0x11da <udd_ep_alloc>
     518:	81 11       	cpse	r24, r1
     51a:	f3 cf       	rjmp	.-26     	; 0x502 <udc_iface_enable+0x16>
     51c:	15 c0       	rjmp	.+42     	; 0x548 <udc_iface_enable+0x5c>
     51e:	a0 91 e1 20 	lds	r26, 0x20E1
     522:	b0 91 e2 20 	lds	r27, 0x20E2
     526:	81 2f       	mov	r24, r17
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	12 96       	adiw	r26, 0x02	; 2
     530:	ed 91       	ld	r30, X+
     532:	fc 91       	ld	r31, X
     534:	13 97       	sbiw	r26, 0x03	; 3
     536:	e8 0f       	add	r30, r24
     538:	f9 1f       	adc	r31, r25
     53a:	01 90       	ld	r0, Z+
     53c:	f0 81       	ld	r31, Z
     53e:	e0 2d       	mov	r30, r0
     540:	01 90       	ld	r0, Z+
     542:	f0 81       	ld	r31, Z
     544:	e0 2d       	mov	r30, r0
     546:	09 95       	icall
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	08 95       	ret

00000550 <udc_get_interface_desc>:
     550:	80 91 df 20 	lds	r24, 0x20DF
     554:	90 91 e0 20 	lds	r25, 0x20E0
     558:	08 95       	ret

0000055a <udc_start>:
     55a:	cd c5       	rjmp	.+2970   	; 0x10f6 <udd_enable>
     55c:	08 95       	ret

0000055e <udc_reset>:
     55e:	cf 93       	push	r28
     560:	80 91 e3 20 	lds	r24, 0x20E3
     564:	88 23       	and	r24, r24
     566:	c1 f0       	breq	.+48     	; 0x598 <udc_reset+0x3a>
     568:	e0 91 e1 20 	lds	r30, 0x20E1
     56c:	f0 91 e2 20 	lds	r31, 0x20E2
     570:	01 90       	ld	r0, Z+
     572:	f0 81       	ld	r31, Z
     574:	e0 2d       	mov	r30, r0
     576:	84 81       	ldd	r24, Z+4	; 0x04
     578:	88 23       	and	r24, r24
     57a:	71 f0       	breq	.+28     	; 0x598 <udc_reset+0x3a>
     57c:	c0 e0       	ldi	r28, 0x00	; 0
     57e:	8c 2f       	mov	r24, r28
     580:	74 df       	rcall	.-280    	; 0x46a <udc_iface_disable>
     582:	cf 5f       	subi	r28, 0xFF	; 255
     584:	e0 91 e1 20 	lds	r30, 0x20E1
     588:	f0 91 e2 20 	lds	r31, 0x20E2
     58c:	01 90       	ld	r0, Z+
     58e:	f0 81       	ld	r31, Z
     590:	e0 2d       	mov	r30, r0
     592:	84 81       	ldd	r24, Z+4	; 0x04
     594:	c8 17       	cp	r28, r24
     596:	98 f3       	brcs	.-26     	; 0x57e <udc_reset+0x20>
     598:	10 92 e3 20 	sts	0x20E3, r1
     59c:	10 92 e4 20 	sts	0x20E4, r1
     5a0:	10 92 e5 20 	sts	0x20E5, r1
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     5a8:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     5aa:	80 91 e3 20 	lds	r24, 0x20E3
     5ae:	88 23       	and	r24, r24
     5b0:	41 f1       	breq	.+80     	; 0x602 <udc_sof_notify+0x5a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     5b2:	e0 91 e1 20 	lds	r30, 0x20E1
     5b6:	f0 91 e2 20 	lds	r31, 0x20E2
     5ba:	a0 81       	ld	r26, Z
     5bc:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     5be:	14 96       	adiw	r26, 0x04	; 4
     5c0:	8c 91       	ld	r24, X
     5c2:	88 23       	and	r24, r24
     5c4:	f1 f0       	breq	.+60     	; 0x602 <udc_sof_notify+0x5a>
     5c6:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     5c8:	8c 2f       	mov	r24, r28
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	02 80       	ldd	r0, Z+2	; 0x02
     5d2:	f3 81       	ldd	r31, Z+3	; 0x03
     5d4:	e0 2d       	mov	r30, r0
     5d6:	e8 0f       	add	r30, r24
     5d8:	f9 1f       	adc	r31, r25
     5da:	01 90       	ld	r0, Z+
     5dc:	f0 81       	ld	r31, Z
     5de:	e0 2d       	mov	r30, r0
     5e0:	00 84       	ldd	r0, Z+8	; 0x08
     5e2:	f1 85       	ldd	r31, Z+9	; 0x09
     5e4:	e0 2d       	mov	r30, r0
     5e6:	30 97       	sbiw	r30, 0x00	; 0
     5e8:	09 f0       	breq	.+2      	; 0x5ec <udc_sof_notify+0x44>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     5ea:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     5ec:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     5ee:	e0 91 e1 20 	lds	r30, 0x20E1
     5f2:	f0 91 e2 20 	lds	r31, 0x20E2
     5f6:	a0 81       	ld	r26, Z
     5f8:	b1 81       	ldd	r27, Z+1	; 0x01
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     5fa:	14 96       	adiw	r26, 0x04	; 4
     5fc:	8c 91       	ld	r24, X
     5fe:	c8 17       	cp	r28, r24
     600:	18 f3       	brcs	.-58     	; 0x5c8 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     612:	10 92 80 21 	sts	0x2180, r1
     616:	10 92 81 21 	sts	0x2181, r1
	udd_g_ctrlreq.callback = NULL;
     61a:	10 92 82 21 	sts	0x2182, r1
     61e:	10 92 83 21 	sts	0x2183, r1
	udd_g_ctrlreq.over_under_run = NULL;
     622:	10 92 84 21 	sts	0x2184, r1
     626:	10 92 85 21 	sts	0x2185, r1

	if (Udd_setup_is_in()) {
     62a:	20 91 76 21 	lds	r18, 0x2176
     62e:	22 23       	and	r18, r18
     630:	0c f0       	brlt	.+2      	; 0x634 <udc_process_setup+0x2e>
     632:	8c c2       	rjmp	.+1304   	; 0xb4c <udc_process_setup+0x546>
		if (udd_g_ctrlreq.req.wLength == 0) {
     634:	80 91 7c 21 	lds	r24, 0x217C
     638:	90 91 7d 21 	lds	r25, 0x217D
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	09 f0       	breq	.+2      	; 0x642 <udc_process_setup+0x3c>
     640:	8a c2       	rjmp	.+1300   	; 0xb56 <udc_process_setup+0x550>
     642:	80 c2       	rjmp	.+1280   	; 0xb44 <udc_process_setup+0x53e>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     644:	2f 71       	andi	r18, 0x1F	; 31
     646:	09 f0       	breq	.+2      	; 0x64a <udc_process_setup+0x44>
     648:	b2 c0       	rjmp	.+356    	; 0x7ae <udc_process_setup+0x1a8>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     64a:	30 91 77 21 	lds	r19, 0x2177
     64e:	36 30       	cpi	r19, 0x06	; 6
     650:	81 f0       	breq	.+32     	; 0x672 <udc_process_setup+0x6c>
     652:	38 30       	cpi	r19, 0x08	; 8
     654:	09 f4       	brne	.+2      	; 0x658 <udc_process_setup+0x52>
     656:	a0 c0       	rjmp	.+320    	; 0x798 <udc_process_setup+0x192>
     658:	31 11       	cpse	r19, r1
     65a:	a9 c0       	rjmp	.+338    	; 0x7ae <udc_process_setup+0x1a8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     65c:	02 97       	sbiw	r24, 0x02	; 2
     65e:	39 f4       	brne	.+14     	; 0x66e <udc_process_setup+0x68>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	84 ee       	ldi	r24, 0xE4	; 228
     666:	90 e2       	ldi	r25, 0x20	; 32
     668:	af d5       	rcall	.+2910   	; 0x11c8 <udd_set_setup_payload>
			sizeof(udc_device_status));
	return true;
     66a:	01 e0       	ldi	r16, 0x01	; 1
     66c:	ee c1       	rjmp	.+988    	; 0xa4a <udc_process_setup+0x444>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	ec c1       	rjmp	.+984    	; 0xa4a <udc_process_setup+0x444>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     672:	20 91 78 21 	lds	r18, 0x2178
     676:	30 91 79 21 	lds	r19, 0x2179

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     67a:	83 2f       	mov	r24, r19
     67c:	99 27       	eor	r25, r25
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	91 05       	cpc	r25, r1
     682:	99 f0       	breq	.+38     	; 0x6aa <udc_process_setup+0xa4>
     684:	1c f4       	brge	.+6      	; 0x68c <udc_process_setup+0x86>
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	39 f0       	breq	.+14     	; 0x698 <udc_process_setup+0x92>
     68a:	7c c0       	rjmp	.+248    	; 0x784 <udc_process_setup+0x17e>
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	91 05       	cpc	r25, r1
     690:	d9 f1       	breq	.+118    	; 0x708 <udc_process_setup+0x102>
     692:	0f 97       	sbiw	r24, 0x0f	; 15
     694:	59 f1       	breq	.+86     	; 0x6ec <udc_process_setup+0xe6>
     696:	76 c0       	rjmp	.+236    	; 0x784 <udc_process_setup+0x17e>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     698:	80 91 7c 20 	lds	r24, 0x207C
     69c:	90 91 7d 20 	lds	r25, 0x207D
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     6a0:	dc 01       	movw	r26, r24
     6a2:	6c 91       	ld	r22, X
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	90 d5       	rcall	.+2848   	; 0x11c8 <udd_set_setup_payload>
     6a8:	5c c0       	rjmp	.+184    	; 0x762 <udc_process_setup+0x15c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     6aa:	e0 91 7c 20 	lds	r30, 0x207C
     6ae:	f0 91 7d 20 	lds	r31, 0x207D
     6b2:	81 89       	ldd	r24, Z+17	; 0x11
     6b4:	28 17       	cp	r18, r24
     6b6:	08 f0       	brcs	.+2      	; 0x6ba <udc_process_setup+0xb4>
     6b8:	67 c0       	rjmp	.+206    	; 0x788 <udc_process_setup+0x182>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     6ba:	c9 01       	movw	r24, r18
     6bc:	99 27       	eor	r25, r25
     6be:	88 0f       	add	r24, r24
     6c0:	99 1f       	adc	r25, r25
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	e0 91 7e 20 	lds	r30, 0x207E
     6ca:	f0 91 7f 20 	lds	r31, 0x207F
     6ce:	e8 0f       	add	r30, r24
     6d0:	f9 1f       	adc	r31, r25
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     6d6:	fc 01       	movw	r30, r24
     6d8:	62 81       	ldd	r22, Z+2	; 0x02
     6da:	73 81       	ldd	r23, Z+3	; 0x03
     6dc:	75 d5       	rcall	.+2794   	; 0x11c8 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     6de:	e0 91 7e 21 	lds	r30, 0x217E
     6e2:	f0 91 7f 21 	lds	r31, 0x217F
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	81 83       	std	Z+1, r24	; 0x01
     6ea:	3b c0       	rjmp	.+118    	; 0x762 <udc_process_setup+0x15c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     6ec:	80 91 80 20 	lds	r24, 0x2080
     6f0:	90 91 81 20 	lds	r25, 0x2081
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	09 f4       	brne	.+2      	; 0x6fa <udc_process_setup+0xf4>
     6f8:	49 c0       	rjmp	.+146    	; 0x78c <udc_process_setup+0x186>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     6fa:	dc 01       	movw	r26, r24
     6fc:	12 96       	adiw	r26, 0x02	; 2
     6fe:	6d 91       	ld	r22, X+
     700:	7c 91       	ld	r23, X
     702:	13 97       	sbiw	r26, 0x03	; 3
     704:	61 d5       	rcall	.+2754   	; 0x11c8 <udd_set_setup_payload>
     706:	2d c0       	rjmp	.+90     	; 0x762 <udc_process_setup+0x15c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     708:	33 27       	eor	r19, r19
     70a:	21 30       	cpi	r18, 0x01	; 1
     70c:	31 05       	cpc	r19, r1
     70e:	81 f0       	breq	.+32     	; 0x730 <udc_process_setup+0x12a>
     710:	48 f0       	brcs	.+18     	; 0x724 <udc_process_setup+0x11e>
     712:	22 30       	cpi	r18, 0x02	; 2
     714:	31 05       	cpc	r19, r1
     716:	09 f4       	brne	.+2      	; 0x71a <udc_process_setup+0x114>
     718:	23 c2       	rjmp	.+1094   	; 0xb60 <udc_process_setup+0x55a>
     71a:	23 30       	cpi	r18, 0x03	; 3
     71c:	31 05       	cpc	r19, r1
     71e:	09 f4       	brne	.+2      	; 0x722 <udc_process_setup+0x11c>
     720:	23 c2       	rjmp	.+1094   	; 0xb68 <udc_process_setup+0x562>
     722:	36 c0       	rjmp	.+108    	; 0x790 <udc_process_setup+0x18a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     724:	64 e0       	ldi	r22, 0x04	; 4
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	88 e7       	ldi	r24, 0x78	; 120
     72a:	90 e2       	ldi	r25, 0x20	; 32
     72c:	4d d5       	rcall	.+2714   	; 0x11c8 <udd_set_setup_payload>
     72e:	19 c0       	rjmp	.+50     	; 0x762 <udc_process_setup+0x15c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     730:	8a e6       	ldi	r24, 0x6A	; 106
     732:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     734:	2c e0       	ldi	r18, 0x0C	; 12
     736:	38 2f       	mov	r19, r24
     738:	ac e3       	ldi	r26, 0x3C	; 60
     73a:	b0 e2       	ldi	r27, 0x20	; 32
     73c:	e8 2f       	mov	r30, r24
     73e:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     740:	81 91       	ld	r24, Z+
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	8d 93       	st	X+, r24
     746:	9d 93       	st	X+, r25
     748:	8e 2f       	mov	r24, r30
     74a:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     74c:	82 17       	cp	r24, r18
     74e:	c0 f3       	brcs	.-16     	; 0x740 <udc_process_setup+0x13a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     750:	22 0f       	add	r18, r18
     752:	62 e0       	ldi	r22, 0x02	; 2
     754:	62 0f       	add	r22, r18
     756:	60 93 3a 20 	sts	0x203A, r22
		udd_set_setup_payload(
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	8a e3       	ldi	r24, 0x3A	; 58
     75e:	90 e2       	ldi	r25, 0x20	; 32
     760:	33 d5       	rcall	.+2662   	; 0x11c8 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     762:	80 91 7c 21 	lds	r24, 0x217C
     766:	90 91 7d 21 	lds	r25, 0x217D
     76a:	20 91 80 21 	lds	r18, 0x2180
     76e:	30 91 81 21 	lds	r19, 0x2181
     772:	82 17       	cp	r24, r18
     774:	93 07       	cpc	r25, r19
     776:	70 f4       	brcc	.+28     	; 0x794 <udc_process_setup+0x18e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     778:	80 93 80 21 	sts	0x2180, r24
     77c:	90 93 81 21 	sts	0x2181, r25
	}
	return true;
     780:	01 e0       	ldi	r16, 0x01	; 1
     782:	63 c1       	rjmp	.+710    	; 0xa4a <udc_process_setup+0x444>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     784:	00 e0       	ldi	r16, 0x00	; 0
     786:	61 c1       	rjmp	.+706    	; 0xa4a <udc_process_setup+0x444>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     788:	00 e0       	ldi	r16, 0x00	; 0
     78a:	5f c1       	rjmp	.+702    	; 0xa4a <udc_process_setup+0x444>
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	5d c1       	rjmp	.+698    	; 0xa4a <udc_process_setup+0x444>
		break;

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     790:	00 e0       	ldi	r16, 0x00	; 0
     792:	5b c1       	rjmp	.+694    	; 0xa4a <udc_process_setup+0x444>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     794:	01 e0       	ldi	r16, 0x01	; 1
     796:	59 c1       	rjmp	.+690    	; 0xa4a <udc_process_setup+0x444>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     798:	01 97       	sbiw	r24, 0x01	; 1
     79a:	39 f4       	brne	.+14     	; 0x7aa <udc_process_setup+0x1a4>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	83 ee       	ldi	r24, 0xE3	; 227
     7a2:	90 e2       	ldi	r25, 0x20	; 32
     7a4:	11 d5       	rcall	.+2594   	; 0x11c8 <udd_set_setup_payload>
	return true;
     7a6:	01 e0       	ldi	r16, 0x01	; 1
     7a8:	50 c1       	rjmp	.+672    	; 0xa4a <udc_process_setup+0x444>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     7aa:	00 e0       	ldi	r16, 0x00	; 0
     7ac:	4e c1       	rjmp	.+668    	; 0xa4a <udc_process_setup+0x444>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     7ae:	21 30       	cpi	r18, 0x01	; 1
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <udc_process_setup+0x1ae>
     7b2:	3f c0       	rjmp	.+126    	; 0x832 <udc_process_setup+0x22c>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     7b4:	30 91 77 21 	lds	r19, 0x2177
     7b8:	3a 30       	cpi	r19, 0x0A	; 10
     7ba:	d9 f5       	brne	.+118    	; 0x832 <udc_process_setup+0x22c>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	99 f5       	brne	.+102    	; 0x826 <udc_process_setup+0x220>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     7c0:	80 91 e3 20 	lds	r24, 0x20E3
     7c4:	88 23       	and	r24, r24
     7c6:	89 f1       	breq	.+98     	; 0x82a <udc_process_setup+0x224>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     7c8:	c0 91 7a 21 	lds	r28, 0x217A
     7cc:	d0 91 7b 21 	lds	r29, 0x217B
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     7d0:	e0 90 e1 20 	lds	r14, 0x20E1
     7d4:	f0 90 e2 20 	lds	r15, 0x20E2
     7d8:	d7 01       	movw	r26, r14
     7da:	ed 91       	ld	r30, X+
     7dc:	fc 91       	ld	r31, X
     7de:	84 81       	ldd	r24, Z+4	; 0x04
     7e0:	c8 17       	cp	r28, r24
     7e2:	28 f5       	brcc	.+74     	; 0x82e <udc_process_setup+0x228>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	8c 2f       	mov	r24, r28
     7e8:	06 de       	rcall	.-1012   	; 0x3f6 <udc_update_iface_desc>
     7ea:	08 2f       	mov	r16, r24
     7ec:	88 23       	and	r24, r24
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <udc_process_setup+0x1ec>
     7f0:	2c c1       	rjmp	.+600    	; 0xa4a <udc_process_setup+0x444>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     7f2:	ce 01       	movw	r24, r28
     7f4:	99 27       	eor	r25, r25
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	d7 01       	movw	r26, r14
     7fc:	12 96       	adiw	r26, 0x02	; 2
     7fe:	ed 91       	ld	r30, X+
     800:	fc 91       	ld	r31, X
     802:	13 97       	sbiw	r26, 0x03	; 3
     804:	e8 0f       	add	r30, r24
     806:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     808:	01 90       	ld	r0, Z+
     80a:	f0 81       	ld	r31, Z
     80c:	e0 2d       	mov	r30, r0
     80e:	06 80       	ldd	r0, Z+6	; 0x06
     810:	f7 81       	ldd	r31, Z+7	; 0x07
     812:	e0 2d       	mov	r30, r0
     814:	09 95       	icall
     816:	80 93 de 20 	sts	0x20DE, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	8e ed       	ldi	r24, 0xDE	; 222
     820:	90 e2       	ldi	r25, 0x20	; 32
     822:	d2 d4       	rcall	.+2468   	; 0x11c8 <udd_set_setup_payload>
     824:	12 c1       	rjmp	.+548    	; 0xa4a <udc_process_setup+0x444>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	10 c1       	rjmp	.+544    	; 0xa4a <udc_process_setup+0x444>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	0e c1       	rjmp	.+540    	; 0xa4a <udc_process_setup+0x444>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     82e:	00 e0       	ldi	r16, 0x00	; 0
     830:	0c c1       	rjmp	.+536    	; 0xa4a <udc_process_setup+0x444>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     832:	22 30       	cpi	r18, 0x02	; 2
     834:	09 f0       	breq	.+2      	; 0x838 <udc_process_setup+0x232>
     836:	0b c1       	rjmp	.+534    	; 0xa4e <udc_process_setup+0x448>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     838:	20 91 77 21 	lds	r18, 0x2177
     83c:	21 11       	cpse	r18, r1
     83e:	00 c1       	rjmp	.+512    	; 0xa40 <udc_process_setup+0x43a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     840:	02 97       	sbiw	r24, 0x02	; 2
     842:	79 f4       	brne	.+30     	; 0x862 <udc_process_setup+0x25c>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     844:	80 91 7a 21 	lds	r24, 0x217A
     848:	29 d5       	rcall	.+2642   	; 0x129c <udd_ep_is_halted>
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	80 93 dc 20 	sts	0x20DC, r24
     850:	90 93 dd 20 	sts	0x20DD, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     854:	62 e0       	ldi	r22, 0x02	; 2
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	8c ed       	ldi	r24, 0xDC	; 220
     85a:	90 e2       	ldi	r25, 0x20	; 32
     85c:	b5 d4       	rcall	.+2410   	; 0x11c8 <udd_set_setup_payload>
			sizeof(udc_ep_status));
	return true;
     85e:	01 e0       	ldi	r16, 0x01	; 1
     860:	f4 c0       	rjmp	.+488    	; 0xa4a <udc_process_setup+0x444>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     862:	00 e0       	ldi	r16, 0x00	; 0
     864:	f2 c0       	rjmp	.+484    	; 0xa4a <udc_process_setup+0x444>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     866:	2f 71       	andi	r18, 0x1F	; 31
     868:	09 f0       	breq	.+2      	; 0x86c <udc_process_setup+0x266>
     86a:	90 c0       	rjmp	.+288    	; 0x98c <udc_process_setup+0x386>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     86c:	80 91 77 21 	lds	r24, 0x2177
     870:	83 30       	cpi	r24, 0x03	; 3
     872:	09 f4       	brne	.+2      	; 0x876 <udc_process_setup+0x270>
     874:	e7 c0       	rjmp	.+462    	; 0xa44 <udc_process_setup+0x43e>
     876:	18 f4       	brcc	.+6      	; 0x87e <udc_process_setup+0x278>
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	b1 f0       	breq	.+44     	; 0x8a8 <udc_process_setup+0x2a2>
     87c:	87 c0       	rjmp	.+270    	; 0x98c <udc_process_setup+0x386>
     87e:	85 30       	cpi	r24, 0x05	; 5
     880:	19 f0       	breq	.+6      	; 0x888 <udc_process_setup+0x282>
     882:	89 30       	cpi	r24, 0x09	; 9
     884:	61 f1       	breq	.+88     	; 0x8de <udc_process_setup+0x2d8>
     886:	82 c0       	rjmp	.+260    	; 0x98c <udc_process_setup+0x386>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     888:	80 91 7c 21 	lds	r24, 0x217C
     88c:	90 91 7d 21 	lds	r25, 0x217D
     890:	89 2b       	or	r24, r25
     892:	41 f4       	brne	.+16     	; 0x8a4 <udc_process_setup+0x29e>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     894:	86 ef       	ldi	r24, 0xF6	; 246
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	80 93 82 21 	sts	0x2182, r24
     89c:	90 93 83 21 	sts	0x2183, r25
	return true;
     8a0:	01 e0       	ldi	r16, 0x01	; 1
     8a2:	d3 c0       	rjmp	.+422    	; 0xa4a <udc_process_setup+0x444>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     8a4:	00 e0       	ldi	r16, 0x00	; 0
     8a6:	d1 c0       	rjmp	.+418    	; 0xa4a <udc_process_setup+0x444>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     8a8:	80 91 7c 21 	lds	r24, 0x217C
     8ac:	90 91 7d 21 	lds	r25, 0x217D
     8b0:	89 2b       	or	r24, r25
     8b2:	89 f4       	brne	.+34     	; 0x8d6 <udc_process_setup+0x2d0>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     8b4:	80 91 78 21 	lds	r24, 0x2178
     8b8:	90 91 79 21 	lds	r25, 0x2179
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	69 f4       	brne	.+26     	; 0x8da <udc_process_setup+0x2d4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     8c0:	80 91 e4 20 	lds	r24, 0x20E4
     8c4:	90 91 e5 20 	lds	r25, 0x20E5
     8c8:	8d 7f       	andi	r24, 0xFD	; 253
     8ca:	80 93 e4 20 	sts	0x20E4, r24
     8ce:	90 93 e5 20 	sts	0x20E5, r25
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     8d2:	01 e0       	ldi	r16, 0x01	; 1
     8d4:	ba c0       	rjmp	.+372    	; 0xa4a <udc_process_setup+0x444>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     8d6:	00 e0       	ldi	r16, 0x00	; 0
     8d8:	b8 c0       	rjmp	.+368    	; 0xa4a <udc_process_setup+0x444>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	b6 c0       	rjmp	.+364    	; 0xa4a <udc_process_setup+0x444>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     8de:	80 91 7c 21 	lds	r24, 0x217C
     8e2:	90 91 7d 21 	lds	r25, 0x217D
     8e6:	89 2b       	or	r24, r25
     8e8:	09 f0       	breq	.+2      	; 0x8ec <udc_process_setup+0x2e6>
     8ea:	46 c0       	rjmp	.+140    	; 0x978 <udc_process_setup+0x372>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     8ec:	6a d4       	rcall	.+2260   	; 0x11c2 <udd_getaddress>
     8ee:	88 23       	and	r24, r24
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <udc_process_setup+0x2ee>
     8f2:	44 c0       	rjmp	.+136    	; 0x97c <udc_process_setup+0x376>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     8f4:	20 91 78 21 	lds	r18, 0x2178
     8f8:	30 91 79 21 	lds	r19, 0x2179
     8fc:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     8fe:	e0 91 7c 20 	lds	r30, 0x207C
     902:	f0 91 7d 20 	lds	r31, 0x207D
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     906:	81 89       	ldd	r24, Z+17	; 0x11
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	82 17       	cp	r24, r18
     90c:	93 07       	cpc	r25, r19
     90e:	c0 f1       	brcs	.+112    	; 0x980 <udc_process_setup+0x37a>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     910:	26 de       	rcall	.-948    	; 0x55e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     912:	80 91 78 21 	lds	r24, 0x2178
     916:	90 91 79 21 	lds	r25, 0x2179
     91a:	80 93 e3 20 	sts	0x20E3, r24
	if (udc_num_configuration == 0) {
     91e:	88 23       	and	r24, r24
     920:	89 f1       	breq	.+98     	; 0x984 <udc_process_setup+0x37e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     922:	99 27       	eor	r25, r25
     924:	81 50       	subi	r24, 0x01	; 1
     926:	90 4c       	sbci	r25, 0xC0	; 192
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	e0 91 7e 20 	lds	r30, 0x207E
     934:	f0 91 7f 20 	lds	r31, 0x207F
     938:	e8 0f       	add	r30, r24
     93a:	f9 1f       	adc	r31, r25
     93c:	e0 93 e1 20 	sts	0x20E1, r30
     940:	f0 93 e2 20 	sts	0x20E2, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     944:	01 90       	ld	r0, Z+
     946:	f0 81       	ld	r31, Z
     948:	e0 2d       	mov	r30, r0
     94a:	84 81       	ldd	r24, Z+4	; 0x04
     94c:	88 23       	and	r24, r24
     94e:	e1 f0       	breq	.+56     	; 0x988 <udc_process_setup+0x382>
     950:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	8c 2f       	mov	r24, r28
     956:	ca dd       	rcall	.-1132   	; 0x4ec <udc_iface_enable>
     958:	08 2f       	mov	r16, r24
     95a:	88 23       	and	r24, r24
     95c:	09 f4       	brne	.+2      	; 0x960 <udc_process_setup+0x35a>
     95e:	75 c0       	rjmp	.+234    	; 0xa4a <udc_process_setup+0x444>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     960:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     962:	e0 91 e1 20 	lds	r30, 0x20E1
     966:	f0 91 e2 20 	lds	r31, 0x20E2
     96a:	01 90       	ld	r0, Z+
     96c:	f0 81       	ld	r31, Z
     96e:	e0 2d       	mov	r30, r0
     970:	84 81       	ldd	r24, Z+4	; 0x04
     972:	c8 17       	cp	r28, r24
     974:	70 f3       	brcs	.-36     	; 0x952 <udc_process_setup+0x34c>
     976:	69 c0       	rjmp	.+210    	; 0xa4a <udc_process_setup+0x444>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     978:	00 e0       	ldi	r16, 0x00	; 0
     97a:	67 c0       	rjmp	.+206    	; 0xa4a <udc_process_setup+0x444>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     97c:	00 e0       	ldi	r16, 0x00	; 0
     97e:	65 c0       	rjmp	.+202    	; 0xa4a <udc_process_setup+0x444>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     980:	00 e0       	ldi	r16, 0x00	; 0
     982:	63 c0       	rjmp	.+198    	; 0xa4a <udc_process_setup+0x444>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     984:	01 e0       	ldi	r16, 0x01	; 1
     986:	61 c0       	rjmp	.+194    	; 0xa4a <udc_process_setup+0x444>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     988:	01 e0       	ldi	r16, 0x01	; 1
     98a:	5f c0       	rjmp	.+190    	; 0xa4a <udc_process_setup+0x444>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     98c:	21 30       	cpi	r18, 0x01	; 1
     98e:	09 f5       	brne	.+66     	; 0x9d2 <udc_process_setup+0x3cc>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     990:	80 91 77 21 	lds	r24, 0x2177
     994:	8b 30       	cpi	r24, 0x0B	; 11
     996:	e9 f4       	brne	.+58     	; 0x9d2 <udc_process_setup+0x3cc>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     998:	80 91 7c 21 	lds	r24, 0x217C
     99c:	90 91 7d 21 	lds	r25, 0x217D
     9a0:	89 2b       	or	r24, r25
     9a2:	99 f4       	brne	.+38     	; 0x9ca <udc_process_setup+0x3c4>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     9a4:	80 91 e3 20 	lds	r24, 0x20E3
     9a8:	88 23       	and	r24, r24
     9aa:	89 f0       	breq	.+34     	; 0x9ce <udc_process_setup+0x3c8>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     9ac:	c0 91 7a 21 	lds	r28, 0x217A
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     9b0:	d0 91 78 21 	lds	r29, 0x2178

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     9b4:	8c 2f       	mov	r24, r28
     9b6:	59 dd       	rcall	.-1358   	; 0x46a <udc_iface_disable>
     9b8:	08 2f       	mov	r16, r24
     9ba:	88 23       	and	r24, r24
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <udc_process_setup+0x3ba>
     9be:	45 c0       	rjmp	.+138    	; 0xa4a <udc_process_setup+0x444>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     9c0:	6d 2f       	mov	r22, r29
     9c2:	8c 2f       	mov	r24, r28
     9c4:	93 dd       	rcall	.-1242   	; 0x4ec <udc_iface_enable>
     9c6:	08 2f       	mov	r16, r24
     9c8:	40 c0       	rjmp	.+128    	; 0xa4a <udc_process_setup+0x444>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
     9ca:	00 e0       	ldi	r16, 0x00	; 0
     9cc:	3e c0       	rjmp	.+124    	; 0xa4a <udc_process_setup+0x444>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     9ce:	00 e0       	ldi	r16, 0x00	; 0
     9d0:	3c c0       	rjmp	.+120    	; 0xa4a <udc_process_setup+0x444>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     9d2:	22 30       	cpi	r18, 0x02	; 2
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <udc_process_setup+0x3d2>
     9d6:	3b c0       	rjmp	.+118    	; 0xa4e <udc_process_setup+0x448>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     9d8:	80 91 77 21 	lds	r24, 0x2177
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	19 f0       	breq	.+6      	; 0x9e6 <udc_process_setup+0x3e0>
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	b1 f0       	breq	.+44     	; 0xa10 <udc_process_setup+0x40a>
     9e4:	31 c0       	rjmp	.+98     	; 0xa48 <udc_process_setup+0x442>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     9e6:	80 91 7c 21 	lds	r24, 0x217C
     9ea:	90 91 7d 21 	lds	r25, 0x217D
     9ee:	89 2b       	or	r24, r25
     9f0:	59 f4       	brne	.+22     	; 0xa08 <udc_process_setup+0x402>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     9f2:	80 91 78 21 	lds	r24, 0x2178
     9f6:	90 91 79 21 	lds	r25, 0x2179
     9fa:	89 2b       	or	r24, r25
     9fc:	39 f4       	brne	.+14     	; 0xa0c <udc_process_setup+0x406>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     9fe:	80 91 7a 21 	lds	r24, 0x217A
     a02:	67 d4       	rcall	.+2254   	; 0x12d2 <udd_ep_clear_halt>
     a04:	08 2f       	mov	r16, r24
     a06:	21 c0       	rjmp	.+66     	; 0xa4a <udc_process_setup+0x444>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     a08:	00 e0       	ldi	r16, 0x00	; 0
     a0a:	1f c0       	rjmp	.+62     	; 0xa4a <udc_process_setup+0x444>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	1d c0       	rjmp	.+58     	; 0xa4a <udc_process_setup+0x444>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     a10:	80 91 7c 21 	lds	r24, 0x217C
     a14:	90 91 7d 21 	lds	r25, 0x217D
     a18:	89 2b       	or	r24, r25
     a1a:	71 f4       	brne	.+28     	; 0xa38 <udc_process_setup+0x432>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     a1c:	80 91 78 21 	lds	r24, 0x2178
     a20:	90 91 79 21 	lds	r25, 0x2179
     a24:	89 2b       	or	r24, r25
     a26:	51 f4       	brne	.+20     	; 0xa3c <udc_process_setup+0x436>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     a28:	ca e7       	ldi	r28, 0x7A	; 122
     a2a:	d1 e2       	ldi	r29, 0x21	; 33
     a2c:	88 81       	ld	r24, Y
     a2e:	02 d5       	rcall	.+2564   	; 0x1434 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     a30:	88 81       	ld	r24, Y
     a32:	56 d5       	rcall	.+2732   	; 0x14e0 <udd_ep_set_halt>
     a34:	08 2f       	mov	r16, r24
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <udc_process_setup+0x444>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	07 c0       	rjmp	.+14     	; 0xa4a <udc_process_setup+0x444>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
     a3c:	00 e0       	ldi	r16, 0x00	; 0
     a3e:	05 c0       	rjmp	.+10     	; 0xa4a <udc_process_setup+0x444>
				break;
			}
		}
#endif
	}
	return false;
     a40:	00 e0       	ldi	r16, 0x00	; 0
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <udc_process_setup+0x444>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     a44:	00 e0       	ldi	r16, 0x00	; 0
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <udc_process_setup+0x444>
				break;
			}
		}
#endif
	}
	return false;
     a48:	00 e0       	ldi	r16, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     a4a:	01 11       	cpse	r16, r1
     a4c:	91 c0       	rjmp	.+290    	; 0xb70 <udc_process_setup+0x56a>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     a4e:	80 91 76 21 	lds	r24, 0x2176
     a52:	8f 71       	andi	r24, 0x1F	; 31
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	c1 f5       	brne	.+112    	; 0xac8 <udc_process_setup+0x4c2>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     a58:	80 91 e3 20 	lds	r24, 0x20E3
     a5c:	88 23       	and	r24, r24
     a5e:	a1 f1       	breq	.+104    	; 0xac8 <udc_process_setup+0x4c2>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     a60:	c0 91 7a 21 	lds	r28, 0x217A
     a64:	d0 91 7b 21 	lds	r29, 0x217B
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a68:	00 91 e1 20 	lds	r16, 0x20E1
     a6c:	10 91 e2 20 	lds	r17, 0x20E2
     a70:	d8 01       	movw	r26, r16
     a72:	ed 91       	ld	r30, X+
     a74:	fc 91       	ld	r31, X
     a76:	84 81       	ldd	r24, Z+4	; 0x04
     a78:	c8 17       	cp	r28, r24
     a7a:	30 f5       	brcc	.+76     	; 0xac8 <udc_process_setup+0x4c2>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	8c 2f       	mov	r24, r28
     a80:	ba dc       	rcall	.-1676   	; 0x3f6 <udc_update_iface_desc>
     a82:	88 23       	and	r24, r24
     a84:	09 f1       	breq	.+66     	; 0xac8 <udc_process_setup+0x4c2>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     a86:	ce 01       	movw	r24, r28
     a88:	99 27       	eor	r25, r25
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	d8 01       	movw	r26, r16
     a90:	12 96       	adiw	r26, 0x02	; 2
     a92:	ed 91       	ld	r30, X+
     a94:	fc 91       	ld	r31, X
     a96:	13 97       	sbiw	r26, 0x03	; 3
     a98:	e8 0f       	add	r30, r24
     a9a:	f9 1f       	adc	r31, r25
     a9c:	00 81       	ld	r16, Z
     a9e:	11 81       	ldd	r17, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     aa0:	d8 01       	movw	r26, r16
     aa2:	16 96       	adiw	r26, 0x06	; 6
     aa4:	ed 91       	ld	r30, X+
     aa6:	fc 91       	ld	r31, X
     aa8:	17 97       	sbiw	r26, 0x07	; 7
     aaa:	09 95       	icall
     aac:	68 2f       	mov	r22, r24
     aae:	8c 2f       	mov	r24, r28
     ab0:	a2 dc       	rcall	.-1724   	; 0x3f6 <udc_update_iface_desc>
     ab2:	88 23       	and	r24, r24
     ab4:	49 f0       	breq	.+18     	; 0xac8 <udc_process_setup+0x4c2>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     ab6:	d8 01       	movw	r26, r16
     ab8:	14 96       	adiw	r26, 0x04	; 4
     aba:	ed 91       	ld	r30, X+
     abc:	fc 91       	ld	r31, X
     abe:	15 97       	sbiw	r26, 0x05	; 5
     ac0:	09 95       	icall
     ac2:	08 2f       	mov	r16, r24
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     ac4:	81 11       	cpse	r24, r1
     ac6:	54 c0       	rjmp	.+168    	; 0xb70 <udc_process_setup+0x56a>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     ac8:	80 91 76 21 	lds	r24, 0x2176
     acc:	8f 71       	andi	r24, 0x1F	; 31
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	d9 f5       	brne	.+118    	; 0xb48 <udc_process_setup+0x542>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     ad2:	80 91 e3 20 	lds	r24, 0x20E3
     ad6:	88 23       	and	r24, r24
     ad8:	89 f1       	breq	.+98     	; 0xb3c <udc_process_setup+0x536>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ada:	e0 91 e1 20 	lds	r30, 0x20E1
     ade:	f0 91 e2 20 	lds	r31, 0x20E2
     ae2:	a0 81       	ld	r26, Z
     ae4:	b1 81       	ldd	r27, Z+1	; 0x01
     ae6:	14 96       	adiw	r26, 0x04	; 4
     ae8:	8c 91       	ld	r24, X
     aea:	88 23       	and	r24, r24
     aec:	49 f1       	breq	.+82     	; 0xb40 <udc_process_setup+0x53a>
     aee:	10 e0       	ldi	r17, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     af0:	21 2f       	mov	r18, r17
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	02 80       	ldd	r0, Z+2	; 0x02
     afa:	f3 81       	ldd	r31, Z+3	; 0x03
     afc:	e0 2d       	mov	r30, r0
     afe:	e2 0f       	add	r30, r18
     b00:	f3 1f       	adc	r31, r19
     b02:	c0 81       	ld	r28, Z
     b04:	d1 81       	ldd	r29, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b06:	ee 81       	ldd	r30, Y+6	; 0x06
     b08:	ff 81       	ldd	r31, Y+7	; 0x07
     b0a:	09 95       	icall
     b0c:	68 2f       	mov	r22, r24
     b0e:	81 2f       	mov	r24, r17
     b10:	72 dc       	rcall	.-1820   	; 0x3f6 <udc_update_iface_desc>
     b12:	08 2f       	mov	r16, r24
     b14:	88 23       	and	r24, r24
     b16:	61 f1       	breq	.+88     	; 0xb70 <udc_process_setup+0x56a>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     b18:	ec 81       	ldd	r30, Y+4	; 0x04
     b1a:	fd 81       	ldd	r31, Y+5	; 0x05
     b1c:	09 95       	icall
     b1e:	08 2f       	mov	r16, r24
     b20:	81 11       	cpse	r24, r1
     b22:	26 c0       	rjmp	.+76     	; 0xb70 <udc_process_setup+0x56a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     b24:	1f 5f       	subi	r17, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     b26:	e0 91 e1 20 	lds	r30, 0x20E1
     b2a:	f0 91 e2 20 	lds	r31, 0x20E2
     b2e:	a0 81       	ld	r26, Z
     b30:	b1 81       	ldd	r27, Z+1	; 0x01
     b32:	14 96       	adiw	r26, 0x04	; 4
     b34:	8c 91       	ld	r24, X
     b36:	18 17       	cp	r17, r24
     b38:	d8 f2       	brcs	.-74     	; 0xaf0 <udc_process_setup+0x4ea>
     b3a:	1a c0       	rjmp	.+52     	; 0xb70 <udc_process_setup+0x56a>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     b3c:	00 e0       	ldi	r16, 0x00	; 0
     b3e:	18 c0       	rjmp	.+48     	; 0xb70 <udc_process_setup+0x56a>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     b40:	00 e0       	ldi	r16, 0x00	; 0
     b42:	16 c0       	rjmp	.+44     	; 0xb70 <udc_process_setup+0x56a>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     b44:	00 e0       	ldi	r16, 0x00	; 0
     b46:	14 c0       	rjmp	.+40     	; 0xb70 <udc_process_setup+0x56a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	12 c0       	rjmp	.+36     	; 0xb70 <udc_process_setup+0x56a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     b4c:	82 2f       	mov	r24, r18
     b4e:	80 76       	andi	r24, 0x60	; 96
     b50:	09 f0       	breq	.+2      	; 0xb54 <udc_process_setup+0x54e>
     b52:	7d cf       	rjmp	.-262    	; 0xa4e <udc_process_setup+0x448>
     b54:	88 ce       	rjmp	.-752    	; 0x866 <udc_process_setup+0x260>
     b56:	32 2f       	mov	r19, r18
     b58:	30 76       	andi	r19, 0x60	; 96
     b5a:	09 f0       	breq	.+2      	; 0xb5e <udc_process_setup+0x558>
     b5c:	78 cf       	rjmp	.-272    	; 0xa4e <udc_process_setup+0x448>
     b5e:	72 cd       	rjmp	.-1308   	; 0x644 <udc_process_setup+0x3e>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     b60:	2f e0       	ldi	r18, 0x0F	; 15
		str = udc_string_product_name;
     b62:	8a e5       	ldi	r24, 0x5A	; 90
     b64:	90 e2       	ldi	r25, 0x20	; 32
     b66:	e7 cd       	rjmp	.-1074   	; 0x736 <udc_process_setup+0x130>
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
     b68:	27 e0       	ldi	r18, 0x07	; 7
		str = udc_get_string_serial_name();
     b6a:	84 ec       	ldi	r24, 0xC4	; 196
     b6c:	90 e2       	ldi	r25, 0x20	; 32
     b6e:	e3 cd       	rjmp	.-1082   	; 0x736 <udc_process_setup+0x130>
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     b70:	80 2f       	mov	r24, r16
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	08 95       	ret

00000b80 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     b80:	81 11       	cpse	r24, r1
     b82:	18 c0       	rjmp	.+48     	; 0xbb4 <udd_sleep_mode+0x34>
     b84:	90 91 74 21 	lds	r25, 0x2174
     b88:	99 23       	and	r25, r25
     b8a:	89 f0       	breq	.+34     	; 0xbae <udd_sleep_mode+0x2e>
     b8c:	9f b7       	in	r25, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	e7 e8       	ldi	r30, 0x87	; 135
     b92:	f1 e2       	ldi	r31, 0x21	; 33
     b94:	20 81       	ld	r18, Z
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	20 83       	st	Z, r18
     b9a:	9f bf       	out	0x3f, r25	; 63
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <udd_sleep_mode+0x2e>
     b9e:	9f b7       	in	r25, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	e7 e8       	ldi	r30, 0x87	; 135
     ba4:	f1 e2       	ldi	r31, 0x21	; 33
     ba6:	20 81       	ld	r18, Z
     ba8:	2f 5f       	subi	r18, 0xFF	; 255
     baa:	20 83       	st	Z, r18
     bac:	9f bf       	out	0x3f, r25	; 63
     bae:	80 93 74 21 	sts	0x2174, r24
     bb2:	08 95       	ret
     bb4:	90 91 74 21 	lds	r25, 0x2174
     bb8:	99 23       	and	r25, r25
     bba:	89 f3       	breq	.-30     	; 0xb9e <udd_sleep_mode+0x1e>
     bbc:	f8 cf       	rjmp	.-16     	; 0xbae <udd_sleep_mode+0x2e>

00000bbe <udd_ctrl_init>:
     bbe:	0f 93       	push	r16
     bc0:	e8 ec       	ldi	r30, 0xC8	; 200
     bc2:	f4 e0       	ldi	r31, 0x04	; 4
     bc4:	80 81       	ld	r24, Z
     bc6:	8f 7d       	andi	r24, 0xDF	; 223
     bc8:	80 83       	st	Z, r24
     bca:	80 81       	ld	r24, Z
     bcc:	8f 7d       	andi	r24, 0xDF	; 223
     bce:	80 83       	st	Z, r24
     bd0:	e8 e5       	ldi	r30, 0x58	; 88
     bd2:	f1 e2       	ldi	r31, 0x21	; 33
     bd4:	02 e0       	ldi	r16, 0x02	; 2
     bd6:	05 93       	las	Z, r16
     bd8:	10 92 5a 21 	sts	0x215A, r1
     bdc:	10 92 5b 21 	sts	0x215B, r1
     be0:	00 e2       	ldi	r16, 0x20	; 32
     be2:	06 93       	lac	Z, r16
     be4:	00 e4       	ldi	r16, 0x40	; 64
     be6:	06 93       	lac	Z, r16
     be8:	e0 e5       	ldi	r30, 0x50	; 80
     bea:	f1 e2       	ldi	r31, 0x21	; 33
     bec:	00 e2       	ldi	r16, 0x20	; 32
     bee:	06 93       	lac	Z, r16
     bf0:	00 e4       	ldi	r16, 0x40	; 64
     bf2:	06 93       	lac	Z, r16
     bf4:	10 92 82 21 	sts	0x2182, r1
     bf8:	10 92 83 21 	sts	0x2183, r1
     bfc:	10 92 84 21 	sts	0x2184, r1
     c00:	10 92 85 21 	sts	0x2185, r1
     c04:	10 92 80 21 	sts	0x2180, r1
     c08:	10 92 81 21 	sts	0x2181, r1
     c0c:	10 92 45 21 	sts	0x2145, r1
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <udd_ctrl_stall_data>:
     c14:	0f 93       	push	r16
     c16:	85 e0       	ldi	r24, 0x05	; 5
     c18:	80 93 45 21 	sts	0x2145, r24
     c1c:	e9 e5       	ldi	r30, 0x59	; 89
     c1e:	f1 e2       	ldi	r31, 0x21	; 33
     c20:	04 e0       	ldi	r16, 0x04	; 4
     c22:	05 93       	las	Z, r16
     c24:	e1 e5       	ldi	r30, 0x51	; 81
     c26:	f1 e2       	ldi	r31, 0x21	; 33
     c28:	04 e0       	ldi	r16, 0x04	; 4
     c2a:	05 93       	las	Z, r16
     c2c:	0f 91       	pop	r16
     c2e:	08 95       	ret

00000c30 <udd_ctrl_send_zlp_in>:
     c30:	0f 93       	push	r16
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	80 93 45 21 	sts	0x2145, r24
     c38:	10 92 5a 21 	sts	0x215A, r1
     c3c:	10 92 5b 21 	sts	0x215B, r1
     c40:	e8 e5       	ldi	r30, 0x58	; 88
     c42:	f1 e2       	ldi	r31, 0x21	; 33
     c44:	02 e0       	ldi	r16, 0x02	; 2
     c46:	06 93       	lac	Z, r16
     c48:	0f 91       	pop	r16
     c4a:	08 95       	ret

00000c4c <udd_ctrl_endofrequest>:
     c4c:	e0 91 82 21 	lds	r30, 0x2182
     c50:	f0 91 83 21 	lds	r31, 0x2183
     c54:	30 97       	sbiw	r30, 0x00	; 0
     c56:	09 f0       	breq	.+2      	; 0xc5a <udd_ctrl_endofrequest+0xe>
     c58:	09 95       	icall
     c5a:	08 95       	ret

00000c5c <udd_ctrl_in_sent>:
     c5c:	0f 93       	push	r16
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	80 91 45 21 	lds	r24, 0x2145
     c66:	83 30       	cpi	r24, 0x03	; 3
     c68:	19 f4       	brne	.+6      	; 0xc70 <udd_ctrl_in_sent+0x14>
     c6a:	f0 df       	rcall	.-32     	; 0xc4c <udd_ctrl_endofrequest>
     c6c:	a8 df       	rcall	.-176    	; 0xbbe <udd_ctrl_init>
     c6e:	60 c0       	rjmp	.+192    	; 0xd30 <udd_ctrl_in_sent+0xd4>
     c70:	80 91 41 21 	lds	r24, 0x2141
     c74:	90 91 42 21 	lds	r25, 0x2142
     c78:	c0 91 80 21 	lds	r28, 0x2180
     c7c:	d0 91 81 21 	lds	r29, 0x2181
     c80:	c8 1b       	sub	r28, r24
     c82:	d9 0b       	sbc	r29, r25
     c84:	71 f5       	brne	.+92     	; 0xce2 <udd_ctrl_in_sent+0x86>
     c86:	20 91 43 21 	lds	r18, 0x2143
     c8a:	30 91 44 21 	lds	r19, 0x2144
     c8e:	82 0f       	add	r24, r18
     c90:	93 1f       	adc	r25, r19
     c92:	80 93 43 21 	sts	0x2143, r24
     c96:	90 93 44 21 	sts	0x2144, r25
     c9a:	20 91 7c 21 	lds	r18, 0x217C
     c9e:	30 91 7d 21 	lds	r19, 0x217D
     ca2:	82 17       	cp	r24, r18
     ca4:	93 07       	cpc	r25, r19
     ca6:	21 f0       	breq	.+8      	; 0xcb0 <udd_ctrl_in_sent+0x54>
     ca8:	80 91 e6 20 	lds	r24, 0x20E6
     cac:	88 23       	and	r24, r24
     cae:	41 f0       	breq	.+16     	; 0xcc0 <udd_ctrl_in_sent+0x64>
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	80 93 45 21 	sts	0x2145, r24
     cb6:	e0 e5       	ldi	r30, 0x50	; 80
     cb8:	f1 e2       	ldi	r31, 0x21	; 33
     cba:	02 e0       	ldi	r16, 0x02	; 2
     cbc:	06 93       	lac	Z, r16
     cbe:	38 c0       	rjmp	.+112    	; 0xd30 <udd_ctrl_in_sent+0xd4>
     cc0:	e0 91 84 21 	lds	r30, 0x2184
     cc4:	f0 91 85 21 	lds	r31, 0x2185
     cc8:	30 97       	sbiw	r30, 0x00	; 0
     cca:	99 f0       	breq	.+38     	; 0xcf2 <udd_ctrl_in_sent+0x96>
     ccc:	09 95       	icall
     cce:	88 23       	and	r24, r24
     cd0:	81 f0       	breq	.+32     	; 0xcf2 <udd_ctrl_in_sent+0x96>
     cd2:	10 92 41 21 	sts	0x2141, r1
     cd6:	10 92 42 21 	sts	0x2142, r1
     cda:	c0 91 80 21 	lds	r28, 0x2180
     cde:	d0 91 81 21 	lds	r29, 0x2181
     ce2:	c8 30       	cpi	r28, 0x08	; 8
     ce4:	d1 05       	cpc	r29, r1
     ce6:	28 f0       	brcs	.+10     	; 0xcf2 <udd_ctrl_in_sent+0x96>
     ce8:	10 92 e6 20 	sts	0x20E6, r1
     cec:	c8 e0       	ldi	r28, 0x08	; 8
     cee:	d0 e0       	ldi	r29, 0x00	; 0
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <udd_ctrl_in_sent+0x9c>
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 93 e6 20 	sts	0x20E6, r24
     cf8:	c0 93 5a 21 	sts	0x215A, r28
     cfc:	d0 93 5b 21 	sts	0x215B, r29
     d00:	80 91 41 21 	lds	r24, 0x2141
     d04:	90 91 42 21 	lds	r25, 0x2142
     d08:	20 91 7e 21 	lds	r18, 0x217E
     d0c:	30 91 7f 21 	lds	r19, 0x217F
     d10:	28 0f       	add	r18, r24
     d12:	39 1f       	adc	r19, r25
     d14:	20 93 5c 21 	sts	0x215C, r18
     d18:	30 93 5d 21 	sts	0x215D, r19
     d1c:	c8 0f       	add	r28, r24
     d1e:	d9 1f       	adc	r29, r25
     d20:	c0 93 41 21 	sts	0x2141, r28
     d24:	d0 93 42 21 	sts	0x2142, r29
     d28:	e8 e5       	ldi	r30, 0x58	; 88
     d2a:	f1 e2       	ldi	r31, 0x21	; 33
     d2c:	02 e0       	ldi	r16, 0x02	; 2
     d2e:	06 93       	lac	Z, r16
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <udd_ep_get_size>:
     d38:	fc 01       	movw	r30, r24
     d3a:	81 81       	ldd	r24, Z+1	; 0x01
     d3c:	87 70       	andi	r24, 0x07	; 7
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	31 97       	sbiw	r30, 0x01	; 1
     d44:	e7 30       	cpi	r30, 0x07	; 7
     d46:	f1 05       	cpc	r31, r1
     d48:	18 f4       	brcc	.+6      	; 0xd50 <udd_ep_get_size+0x18>
     d4a:	e2 50       	subi	r30, 0x02	; 2
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	5e c7       	rjmp	.+3772   	; 0x1c0c <__tablejump2__>
     d50:	88 e0       	ldi	r24, 0x08	; 8
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	08 95       	ret
     d56:	80 e2       	ldi	r24, 0x20	; 32
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	08 95       	ret
     d5c:	80 e4       	ldi	r24, 0x40	; 64
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	08 95       	ret
     d62:	80 e8       	ldi	r24, 0x80	; 128
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	08 95       	ret
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	08 95       	ret
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	92 e0       	ldi	r25, 0x02	; 2
     d72:	08 95       	ret
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	08 95       	ret
     d7a:	80 e1       	ldi	r24, 0x10	; 16
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	08 95       	ret

00000d80 <udd_ep_get_job>:
     d80:	28 2f       	mov	r18, r24
     d82:	2f 70       	andi	r18, 0x0F	; 15
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	99 27       	eor	r25, r25
     d8c:	87 fd       	sbrc	r24, 7
     d8e:	90 95       	com	r25
     d90:	88 27       	eor	r24, r24
     d92:	99 0f       	add	r25, r25
     d94:	88 1f       	adc	r24, r24
     d96:	99 27       	eor	r25, r25
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	02 97       	sbiw	r24, 0x02	; 2
     d9e:	9c 01       	movw	r18, r24
     da0:	22 0f       	add	r18, r18
     da2:	33 1f       	adc	r19, r19
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	22 0f       	add	r18, r18
     daa:	33 1f       	adc	r19, r19
     dac:	82 0f       	add	r24, r18
     dae:	93 1f       	adc	r25, r19
     db0:	89 5d       	subi	r24, 0xD9	; 217
     db2:	9e 4d       	sbci	r25, 0xDE	; 222
     db4:	08 95       	ret

00000db6 <udd_ctrl_interrupt_tc_setup>:
     db6:	0f 93       	push	r16
     db8:	cf 93       	push	r28
     dba:	80 91 cc 04 	lds	r24, 0x04CC
     dbe:	80 ff       	sbrs	r24, 0
     dc0:	62 c0       	rjmp	.+196    	; 0xe86 <udd_ctrl_interrupt_tc_setup+0xd0>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 cc 04 	sts	0x04CC, r24
     dc8:	e0 e5       	ldi	r30, 0x50	; 80
     dca:	f1 e2       	ldi	r31, 0x21	; 33
     dcc:	00 e8       	ldi	r16, 0x80	; 128
     dce:	06 93       	lac	Z, r16
     dd0:	e8 e5       	ldi	r30, 0x58	; 88
     dd2:	f1 e2       	ldi	r31, 0x21	; 33
     dd4:	00 e8       	ldi	r16, 0x80	; 128
     dd6:	06 93       	lac	Z, r16
     dd8:	80 93 ca 04 	sts	0x04CA, r24
     ddc:	e0 e5       	ldi	r30, 0x50	; 80
     dde:	f1 e2       	ldi	r31, 0x21	; 33
     de0:	00 e1       	ldi	r16, 0x10	; 16
     de2:	06 93       	lac	Z, r16
     de4:	80 91 45 21 	lds	r24, 0x2145
     de8:	88 23       	and	r24, r24
     dea:	29 f0       	breq	.+10     	; 0xdf6 <udd_ctrl_interrupt_tc_setup+0x40>
     dec:	83 50       	subi	r24, 0x03	; 3
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	08 f4       	brcc	.+2      	; 0xdf4 <udd_ctrl_interrupt_tc_setup+0x3e>
     df2:	2c df       	rcall	.-424    	; 0xc4c <udd_ctrl_endofrequest>
     df4:	e4 de       	rcall	.-568    	; 0xbbe <udd_ctrl_init>
     df6:	80 91 52 21 	lds	r24, 0x2152
     dfa:	90 91 53 21 	lds	r25, 0x2153
     dfe:	08 97       	sbiw	r24, 0x08	; 8
     e00:	09 f0       	breq	.+2      	; 0xe04 <udd_ctrl_interrupt_tc_setup+0x4e>
     e02:	43 c0       	rjmp	.+134    	; 0xe8a <udd_ctrl_interrupt_tc_setup+0xd4>
     e04:	88 e0       	ldi	r24, 0x08	; 8
     e06:	e9 e3       	ldi	r30, 0x39	; 57
     e08:	f1 e2       	ldi	r31, 0x21	; 33
     e0a:	a6 e7       	ldi	r26, 0x76	; 118
     e0c:	b1 e2       	ldi	r27, 0x21	; 33
     e0e:	01 90       	ld	r0, Z+
     e10:	0d 92       	st	X+, r0
     e12:	8a 95       	dec	r24
     e14:	e1 f7       	brne	.-8      	; 0xe0e <udd_ctrl_interrupt_tc_setup+0x58>
     e16:	e8 ec       	ldi	r30, 0xC8	; 200
     e18:	f4 e0       	ldi	r31, 0x04	; 4
     e1a:	80 81       	ld	r24, Z
     e1c:	80 62       	ori	r24, 0x20	; 32
     e1e:	80 83       	st	Z, r24
     e20:	80 81       	ld	r24, Z
     e22:	80 62       	ori	r24, 0x20	; 32
     e24:	80 83       	st	Z, r24
     e26:	ef db       	rcall	.-2082   	; 0x606 <udc_process_setup>
     e28:	c8 2f       	mov	r28, r24
     e2a:	81 11       	cpse	r24, r1
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <udd_ctrl_interrupt_tc_setup+0x7e>
     e2e:	f2 de       	rcall	.-540    	; 0xc14 <udd_ctrl_stall_data>
     e30:	c1 e0       	ldi	r28, 0x01	; 1
     e32:	2c c0       	rjmp	.+88     	; 0xe8c <udd_ctrl_interrupt_tc_setup+0xd6>
     e34:	80 91 76 21 	lds	r24, 0x2176
     e38:	88 23       	and	r24, r24
     e3a:	6c f4       	brge	.+26     	; 0xe56 <udd_ctrl_interrupt_tc_setup+0xa0>
     e3c:	10 92 43 21 	sts	0x2143, r1
     e40:	10 92 44 21 	sts	0x2144, r1
     e44:	10 92 41 21 	sts	0x2141, r1
     e48:	10 92 42 21 	sts	0x2142, r1
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	80 93 45 21 	sts	0x2145, r24
     e52:	04 df       	rcall	.-504    	; 0xc5c <udd_ctrl_in_sent>
     e54:	1b c0       	rjmp	.+54     	; 0xe8c <udd_ctrl_interrupt_tc_setup+0xd6>
     e56:	20 91 7c 21 	lds	r18, 0x217C
     e5a:	30 91 7d 21 	lds	r19, 0x217D
     e5e:	23 2b       	or	r18, r19
     e60:	11 f4       	brne	.+4      	; 0xe66 <udd_ctrl_interrupt_tc_setup+0xb0>
     e62:	e6 de       	rcall	.-564    	; 0xc30 <udd_ctrl_send_zlp_in>
     e64:	13 c0       	rjmp	.+38     	; 0xe8c <udd_ctrl_interrupt_tc_setup+0xd6>
     e66:	10 92 43 21 	sts	0x2143, r1
     e6a:	10 92 44 21 	sts	0x2144, r1
     e6e:	10 92 41 21 	sts	0x2141, r1
     e72:	10 92 42 21 	sts	0x2142, r1
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 45 21 	sts	0x2145, r24
     e7c:	e0 e5       	ldi	r30, 0x50	; 80
     e7e:	f1 e2       	ldi	r31, 0x21	; 33
     e80:	02 e0       	ldi	r16, 0x02	; 2
     e82:	06 93       	lac	Z, r16
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <udd_ctrl_interrupt_tc_setup+0xd6>
     e86:	c0 e0       	ldi	r28, 0x00	; 0
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <udd_ctrl_interrupt_tc_setup+0xd6>
     e8a:	c1 e0       	ldi	r28, 0x01	; 1
     e8c:	8c 2f       	mov	r24, r28
     e8e:	cf 91       	pop	r28
     e90:	0f 91       	pop	r16
     e92:	08 95       	ret

00000e94 <udd_ep_trans_complet>:
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	b8 2e       	mov	r11, r24
     ea8:	6b df       	rcall	.-298    	; 0xd80 <udd_ep_get_job>
     eaa:	ec 01       	movw	r28, r24
     eac:	1b 2d       	mov	r17, r11
     eae:	11 1f       	adc	r17, r17
     eb0:	11 27       	eor	r17, r17
     eb2:	11 1f       	adc	r17, r17
     eb4:	8b 2d       	mov	r24, r11
     eb6:	8f 70       	andi	r24, 0x0F	; 15
     eb8:	e8 2e       	mov	r14, r24
     eba:	f1 2c       	mov	r15, r1
     ebc:	ee 0c       	add	r14, r14
     ebe:	ff 1c       	adc	r15, r15
     ec0:	e1 0e       	add	r14, r17
     ec2:	f1 1c       	adc	r15, r1
     ec4:	c7 01       	movw	r24, r14
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	9c 01       	movw	r18, r24
     ed4:	20 5b       	subi	r18, 0xB0	; 176
     ed6:	3e 4d       	sbci	r19, 0xDE	; 222
     ed8:	79 01       	movw	r14, r18
     eda:	c9 01       	movw	r24, r18
     edc:	2d df       	rcall	.-422    	; 0xd38 <udd_ep_get_size>
     ede:	6c 01       	movw	r12, r24
     ee0:	11 23       	and	r17, r17
     ee2:	09 f4       	brne	.+2      	; 0xee6 <udd_ep_trans_complet+0x52>
     ee4:	59 c0       	rjmp	.+178    	; 0xf98 <udd_ep_trans_complet+0x104>
     ee6:	d7 01       	movw	r26, r14
     ee8:	16 96       	adiw	r26, 0x06	; 6
     eea:	2d 91       	ld	r18, X+
     eec:	3c 91       	ld	r19, X
     eee:	17 97       	sbiw	r26, 0x07	; 7
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	28 0f       	add	r18, r24
     ef6:	39 1f       	adc	r19, r25
     ef8:	2d 83       	std	Y+5, r18	; 0x05
     efa:	3e 83       	std	Y+6, r19	; 0x06
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	28 17       	cp	r18, r24
     f02:	39 07       	cpc	r19, r25
     f04:	b9 f1       	breq	.+110    	; 0xf74 <udd_ep_trans_complet+0xe0>
     f06:	fc 01       	movw	r30, r24
     f08:	e2 1b       	sub	r30, r18
     f0a:	f3 0b       	sbc	r31, r19
     f0c:	9f 01       	movw	r18, r30
     f0e:	21 15       	cp	r18, r1
     f10:	f4 e0       	ldi	r31, 0x04	; 4
     f12:	3f 07       	cpc	r19, r31
     f14:	38 f0       	brcs	.+14     	; 0xf24 <udd_ep_trans_complet+0x90>
     f16:	2f ef       	ldi	r18, 0xFF	; 255
     f18:	33 e0       	ldi	r19, 0x03	; 3
     f1a:	c9 01       	movw	r24, r18
     f1c:	b6 01       	movw	r22, r12
     f1e:	62 d6       	rcall	.+3268   	; 0x1be4 <__udivmodhi4>
     f20:	28 1b       	sub	r18, r24
     f22:	39 0b       	sbc	r19, r25
     f24:	88 81       	ld	r24, Y
     f26:	81 ff       	sbrs	r24, 1
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <udd_ep_trans_complet+0xa8>
     f2a:	c9 01       	movw	r24, r18
     f2c:	b6 01       	movw	r22, r12
     f2e:	5a d6       	rcall	.+3252   	; 0x1be4 <__udivmodhi4>
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	89 2b       	or	r24, r25
     f34:	09 f0       	breq	.+2      	; 0xf38 <udd_ep_trans_complet+0xa4>
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	94 2f       	mov	r25, r20
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <udd_ep_trans_complet+0xaa>
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 81       	ld	r24, Y
     f40:	90 fb       	bst	r25, 0
     f42:	81 f9       	bld	r24, 1
     f44:	88 83       	st	Y, r24
     f46:	d7 01       	movw	r26, r14
     f48:	16 96       	adiw	r26, 0x06	; 6
     f4a:	1d 92       	st	X+, r1
     f4c:	1c 92       	st	X, r1
     f4e:	17 97       	sbiw	r26, 0x07	; 7
     f50:	12 96       	adiw	r26, 0x02	; 2
     f52:	2d 93       	st	X+, r18
     f54:	3c 93       	st	X, r19
     f56:	13 97       	sbiw	r26, 0x03	; 3
     f58:	29 81       	ldd	r18, Y+1	; 0x01
     f5a:	3a 81       	ldd	r19, Y+2	; 0x02
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	14 96       	adiw	r26, 0x04	; 4
     f66:	8d 93       	st	X+, r24
     f68:	9c 93       	st	X, r25
     f6a:	15 97       	sbiw	r26, 0x05	; 5
     f6c:	f7 01       	movw	r30, r14
     f6e:	02 e0       	ldi	r16, 0x02	; 2
     f70:	06 93       	lac	Z, r16
     f72:	94 c0       	rjmp	.+296    	; 0x109c <udd_ep_trans_complet+0x208>
     f74:	88 81       	ld	r24, Y
     f76:	81 ff       	sbrs	r24, 1
     f78:	83 c0       	rjmp	.+262    	; 0x1080 <udd_ep_trans_complet+0x1ec>
     f7a:	8d 7f       	andi	r24, 0xFD	; 253
     f7c:	88 83       	st	Y, r24
     f7e:	d7 01       	movw	r26, r14
     f80:	16 96       	adiw	r26, 0x06	; 6
     f82:	1d 92       	st	X+, r1
     f84:	1c 92       	st	X, r1
     f86:	17 97       	sbiw	r26, 0x07	; 7
     f88:	12 96       	adiw	r26, 0x02	; 2
     f8a:	1d 92       	st	X+, r1
     f8c:	1c 92       	st	X, r1
     f8e:	13 97       	sbiw	r26, 0x03	; 3
     f90:	f7 01       	movw	r30, r14
     f92:	02 e0       	ldi	r16, 0x02	; 2
     f94:	06 93       	lac	Z, r16
     f96:	82 c0       	rjmp	.+260    	; 0x109c <udd_ep_trans_complet+0x208>
     f98:	d7 01       	movw	r26, r14
     f9a:	12 96       	adiw	r26, 0x02	; 2
     f9c:	0d 91       	ld	r16, X+
     f9e:	1c 91       	ld	r17, X
     fa0:	13 97       	sbiw	r26, 0x03	; 3
     fa2:	88 81       	ld	r24, Y
     fa4:	82 ff       	sbrs	r24, 2
     fa6:	13 c0       	rjmp	.+38     	; 0xfce <udd_ep_trans_complet+0x13a>
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	2d 81       	ldd	r18, Y+5	; 0x05
     fae:	3e 81       	ldd	r19, Y+6	; 0x06
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	b6 01       	movw	r22, r12
     fb6:	16 d6       	rcall	.+3116   	; 0x1be4 <__udivmodhi4>
     fb8:	b0 e4       	ldi	r27, 0x40	; 64
     fba:	bb 9e       	mul	r11, r27
     fbc:	b0 01       	movw	r22, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	69 55       	subi	r22, 0x59	; 89
     fc2:	7f 4d       	sbci	r23, 0xDF	; 223
     fc4:	ac 01       	movw	r20, r24
     fc6:	cf 01       	movw	r24, r30
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	25 d6       	rcall	.+3146   	; 0x1c18 <memcpy>
     fce:	2d 81       	ldd	r18, Y+5	; 0x05
     fd0:	3e 81       	ldd	r19, Y+6	; 0x06
     fd2:	20 0f       	add	r18, r16
     fd4:	31 1f       	adc	r19, r17
     fd6:	2d 83       	std	Y+5, r18	; 0x05
     fd8:	3e 83       	std	Y+6, r19	; 0x06
     fda:	eb 81       	ldd	r30, Y+3	; 0x03
     fdc:	fc 81       	ldd	r31, Y+4	; 0x04
     fde:	e2 17       	cp	r30, r18
     fe0:	f3 07       	cpc	r31, r19
     fe2:	10 f4       	brcc	.+4      	; 0xfe8 <udd_ep_trans_complet+0x154>
     fe4:	ed 83       	std	Y+5, r30	; 0x05
     fe6:	fe 83       	std	Y+6, r31	; 0x06
     fe8:	d7 01       	movw	r26, r14
     fea:	16 96       	adiw	r26, 0x06	; 6
     fec:	8d 91       	ld	r24, X+
     fee:	9c 91       	ld	r25, X
     ff0:	17 97       	sbiw	r26, 0x07	; 7
     ff2:	80 17       	cp	r24, r16
     ff4:	91 07       	cpc	r25, r17
     ff6:	09 f0       	breq	.+2      	; 0xffa <udd_ep_trans_complet+0x166>
     ff8:	43 c0       	rjmp	.+134    	; 0x1080 <udd_ep_trans_complet+0x1ec>
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	e8 17       	cp	r30, r24
    1000:	f9 07       	cpc	r31, r25
    1002:	09 f4       	brne	.+2      	; 0x1006 <udd_ep_trans_complet+0x172>
    1004:	3d c0       	rjmp	.+122    	; 0x1080 <udd_ep_trans_complet+0x1ec>
    1006:	e8 1b       	sub	r30, r24
    1008:	f9 0b       	sbc	r31, r25
    100a:	e1 15       	cp	r30, r1
    100c:	b4 e0       	ldi	r27, 0x04	; 4
    100e:	fb 07       	cpc	r31, r27
    1010:	40 f0       	brcs	.+16     	; 0x1022 <udd_ep_trans_complet+0x18e>
    1012:	ef ef       	ldi	r30, 0xFF	; 255
    1014:	f3 e0       	ldi	r31, 0x03	; 3
    1016:	cf 01       	movw	r24, r30
    1018:	b6 01       	movw	r22, r12
    101a:	e4 d5       	rcall	.+3016   	; 0x1be4 <__udivmodhi4>
    101c:	e8 1b       	sub	r30, r24
    101e:	f9 0b       	sbc	r31, r25
    1020:	05 c0       	rjmp	.+10     	; 0x102c <udd_ep_trans_complet+0x198>
    1022:	cf 01       	movw	r24, r30
    1024:	b6 01       	movw	r22, r12
    1026:	de d5       	rcall	.+3004   	; 0x1be4 <__udivmodhi4>
    1028:	e8 1b       	sub	r30, r24
    102a:	f9 0b       	sbc	r31, r25
    102c:	d7 01       	movw	r26, r14
    102e:	12 96       	adiw	r26, 0x02	; 2
    1030:	1d 92       	st	X+, r1
    1032:	1c 92       	st	X, r1
    1034:	13 97       	sbiw	r26, 0x03	; 3
    1036:	ec 15       	cp	r30, r12
    1038:	fd 05       	cpc	r31, r13
    103a:	78 f4       	brcc	.+30     	; 0x105a <udd_ep_trans_complet+0x1c6>
    103c:	88 81       	ld	r24, Y
    103e:	84 60       	ori	r24, 0x04	; 4
    1040:	88 83       	st	Y, r24
    1042:	b0 e4       	ldi	r27, 0x40	; 64
    1044:	bb 9e       	mul	r11, r27
    1046:	c0 01       	movw	r24, r0
    1048:	11 24       	eor	r1, r1
    104a:	89 55       	subi	r24, 0x59	; 89
    104c:	9f 4d       	sbci	r25, 0xDF	; 223
    104e:	f7 01       	movw	r30, r14
    1050:	84 83       	std	Z+4, r24	; 0x04
    1052:	95 83       	std	Z+5, r25	; 0x05
    1054:	c6 82       	std	Z+6, r12	; 0x06
    1056:	d7 82       	std	Z+7, r13	; 0x07
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <udd_ep_trans_complet+0x1e4>
    105a:	29 81       	ldd	r18, Y+1	; 0x01
    105c:	3a 81       	ldd	r19, Y+2	; 0x02
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	82 0f       	add	r24, r18
    1064:	93 1f       	adc	r25, r19
    1066:	d7 01       	movw	r26, r14
    1068:	14 96       	adiw	r26, 0x04	; 4
    106a:	8d 93       	st	X+, r24
    106c:	9c 93       	st	X, r25
    106e:	15 97       	sbiw	r26, 0x05	; 5
    1070:	16 96       	adiw	r26, 0x06	; 6
    1072:	ed 93       	st	X+, r30
    1074:	fc 93       	st	X, r31
    1076:	17 97       	sbiw	r26, 0x07	; 7
    1078:	f7 01       	movw	r30, r14
    107a:	02 e0       	ldi	r16, 0x02	; 2
    107c:	06 93       	lac	Z, r16
    107e:	0e c0       	rjmp	.+28     	; 0x109c <udd_ep_trans_complet+0x208>
    1080:	88 81       	ld	r24, Y
    1082:	80 ff       	sbrs	r24, 0
    1084:	0b c0       	rjmp	.+22     	; 0x109c <udd_ep_trans_complet+0x208>
    1086:	8e 7f       	andi	r24, 0xFE	; 254
    1088:	88 83       	st	Y, r24
    108a:	ef 81       	ldd	r30, Y+7	; 0x07
    108c:	f8 85       	ldd	r31, Y+8	; 0x08
    108e:	30 97       	sbiw	r30, 0x00	; 0
    1090:	29 f0       	breq	.+10     	; 0x109c <udd_ep_trans_complet+0x208>
    1092:	6d 81       	ldd	r22, Y+5	; 0x05
    1094:	7e 81       	ldd	r23, Y+6	; 0x06
    1096:	4b 2d       	mov	r20, r11
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	09 95       	icall
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	08 95       	ret

000010b0 <udd_attach>:
    10b0:	cf 93       	push	r28
    10b2:	cf b7       	in	r28, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	63 dd       	rcall	.-1338   	; 0xb80 <udd_sleep_mode>
    10ba:	ea ec       	ldi	r30, 0xCA	; 202
    10bc:	f4 e0       	ldi	r31, 0x04	; 4
    10be:	80 e4       	ldi	r24, 0x40	; 64
    10c0:	80 83       	st	Z, r24
    10c2:	80 e2       	ldi	r24, 0x20	; 32
    10c4:	80 83       	st	Z, r24
    10c6:	e1 ec       	ldi	r30, 0xC1	; 193
    10c8:	f4 e0       	ldi	r31, 0x04	; 4
    10ca:	80 81       	ld	r24, Z
    10cc:	81 60       	ori	r24, 0x01	; 1
    10ce:	80 83       	st	Z, r24
    10d0:	a9 ec       	ldi	r26, 0xC9	; 201
    10d2:	b4 e0       	ldi	r27, 0x04	; 4
    10d4:	8c 91       	ld	r24, X
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	8c 93       	st	X, r24
    10da:	e8 ec       	ldi	r30, 0xC8	; 200
    10dc:	f4 e0       	ldi	r31, 0x04	; 4
    10de:	80 81       	ld	r24, Z
    10e0:	80 64       	ori	r24, 0x40	; 64
    10e2:	80 83       	st	Z, r24
    10e4:	8c 91       	ld	r24, X
    10e6:	81 60       	ori	r24, 0x01	; 1
    10e8:	8c 93       	st	X, r24
    10ea:	80 81       	ld	r24, Z
    10ec:	80 68       	ori	r24, 0x80	; 128
    10ee:	80 83       	st	Z, r24
    10f0:	cf bf       	out	0x3f, r28	; 63
    10f2:	cf 91       	pop	r28
    10f4:	08 95       	ret

000010f6 <udd_enable>:
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	c0 e6       	ldi	r28, 0x60	; 96
    10fc:	d0 e0       	ldi	r29, 0x00	; 0
    10fe:	18 82       	st	Y, r1
    1100:	80 e3       	ldi	r24, 0x30	; 48
    1102:	ad d4       	rcall	.+2394   	; 0x1a5e <sysclk_enable_usb>
    1104:	e0 ec       	ldi	r30, 0xC0	; 192
    1106:	f4 e0       	ldi	r31, 0x04	; 4
    1108:	80 81       	ld	r24, Z
    110a:	80 64       	ori	r24, 0x40	; 64
    110c:	80 83       	st	Z, r24
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	88 83       	st	Y, r24
    1112:	cf b7       	in	r28, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	10 92 51 21 	sts	0x2151, r1
    111a:	10 92 59 21 	sts	0x2159, r1
    111e:	10 92 61 21 	sts	0x2161, r1
    1122:	10 92 69 21 	sts	0x2169, r1
    1126:	e7 e2       	ldi	r30, 0x27	; 39
    1128:	f1 e2       	ldi	r31, 0x21	; 33
    112a:	80 81       	ld	r24, Z
    112c:	8e 7f       	andi	r24, 0xFE	; 254
    112e:	80 83       	st	Z, r24
    1130:	e0 e3       	ldi	r30, 0x30	; 48
    1132:	f1 e2       	ldi	r31, 0x21	; 33
    1134:	80 81       	ld	r24, Z
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	80 83       	st	Z, r24
    113a:	6a e1       	ldi	r22, 0x1A	; 26
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	c4 d4       	rcall	.+2440   	; 0x1aca <nvm_read_byte>
    1142:	8f 3f       	cpi	r24, 0xFF	; 255
    1144:	19 f0       	breq	.+6      	; 0x114c <udd_enable+0x56>
    1146:	80 93 fa 04 	sts	0x04FA, r24
    114a:	03 c0       	rjmp	.+6      	; 0x1152 <udd_enable+0x5c>
    114c:	8f e1       	ldi	r24, 0x1F	; 31
    114e:	80 93 fa 04 	sts	0x04FA, r24
    1152:	6b e1       	ldi	r22, 0x1B	; 27
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	b8 d4       	rcall	.+2416   	; 0x1aca <nvm_read_byte>
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	19 f0       	breq	.+6      	; 0x1164 <udd_enable+0x6e>
    115e:	80 93 fb 04 	sts	0x04FB, r24
    1162:	03 c0       	rjmp	.+6      	; 0x116a <udd_enable+0x74>
    1164:	8f e1       	ldi	r24, 0x1F	; 31
    1166:	80 93 fb 04 	sts	0x04FB, r24
    116a:	e0 ec       	ldi	r30, 0xC0	; 192
    116c:	f4 e0       	ldi	r31, 0x04	; 4
    116e:	80 81       	ld	r24, Z
    1170:	81 60       	ori	r24, 0x01	; 1
    1172:	80 83       	st	Z, r24
    1174:	80 81       	ld	r24, Z
    1176:	80 68       	ori	r24, 0x80	; 128
    1178:	80 83       	st	Z, r24
    117a:	80 81       	ld	r24, Z
    117c:	80 61       	ori	r24, 0x10	; 16
    117e:	80 83       	st	Z, r24
    1180:	80 e5       	ldi	r24, 0x50	; 80
    1182:	91 e2       	ldi	r25, 0x21	; 33
    1184:	86 83       	std	Z+6, r24	; 0x06
    1186:	97 83       	std	Z+7, r25	; 0x07
    1188:	80 81       	ld	r24, Z
    118a:	80 62       	ori	r24, 0x20	; 32
    118c:	80 83       	st	Z, r24
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	80 93 c5 04 	sts	0x04C5, r24
    1194:	e8 ec       	ldi	r30, 0xC8	; 200
    1196:	f4 e0       	ldi	r31, 0x04	; 4
    1198:	80 81       	ld	r24, Z
    119a:	81 60       	ori	r24, 0x01	; 1
    119c:	80 83       	st	Z, r24
    119e:	10 92 74 21 	sts	0x2174, r1
    11a2:	8f b7       	in	r24, 0x3f	; 63
    11a4:	f8 94       	cli
    11a6:	eb e8       	ldi	r30, 0x8B	; 139
    11a8:	f1 e2       	ldi	r31, 0x21	; 33
    11aa:	90 81       	ld	r25, Z
    11ac:	9f 5f       	subi	r25, 0xFF	; 255
    11ae:	90 83       	st	Z, r25
    11b0:	8f bf       	out	0x3f, r24	; 63
    11b2:	7e df       	rcall	.-260    	; 0x10b0 <udd_attach>
    11b4:	cf bf       	out	0x3f, r28	; 63
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <udd_set_address>:
    11bc:	80 93 c3 04 	sts	0x04C3, r24
    11c0:	08 95       	ret

000011c2 <udd_getaddress>:
    11c2:	80 91 c3 04 	lds	r24, 0x04C3
    11c6:	08 95       	ret

000011c8 <udd_set_setup_payload>:
    11c8:	80 93 7e 21 	sts	0x217E, r24
    11cc:	90 93 7f 21 	sts	0x217F, r25
    11d0:	60 93 80 21 	sts	0x2180, r22
    11d4:	70 93 81 21 	sts	0x2181, r23
    11d8:	08 95       	ret

000011da <udd_ep_alloc>:
    11da:	e8 2f       	mov	r30, r24
    11dc:	ef 70       	andi	r30, 0x0F	; 15
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	99 27       	eor	r25, r25
    11e6:	87 fd       	sbrc	r24, 7
    11e8:	90 95       	com	r25
    11ea:	88 27       	eor	r24, r24
    11ec:	99 0f       	add	r25, r25
    11ee:	88 1f       	adc	r24, r24
    11f0:	99 27       	eor	r25, r25
    11f2:	e8 0f       	add	r30, r24
    11f4:	f9 1f       	adc	r31, r25
    11f6:	ee 0f       	add	r30, r30
    11f8:	ff 1f       	adc	r31, r31
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31
    11fe:	ee 0f       	add	r30, r30
    1200:	ff 1f       	adc	r31, r31
    1202:	e0 5b       	subi	r30, 0xB0	; 176
    1204:	fe 4d       	sbci	r31, 0xDE	; 222
    1206:	81 81       	ldd	r24, Z+1	; 0x01
    1208:	80 7c       	andi	r24, 0xC0	; 192
    120a:	09 f0       	breq	.+2      	; 0x120e <udd_ep_alloc+0x34>
    120c:	43 c0       	rjmp	.+134    	; 0x1294 <udd_ep_alloc+0xba>
    120e:	63 70       	andi	r22, 0x03	; 3
    1210:	61 30       	cpi	r22, 0x01	; 1
    1212:	29 f0       	breq	.+10     	; 0x121e <udd_ep_alloc+0x44>
    1214:	10 f4       	brcc	.+4      	; 0x121a <udd_ep_alloc+0x40>
    1216:	80 e4       	ldi	r24, 0x40	; 64
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <udd_ep_alloc+0x46>
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <udd_ep_alloc+0x46>
    121e:	80 ec       	ldi	r24, 0xC0	; 192
    1220:	40 38       	cpi	r20, 0x80	; 128
    1222:	51 05       	cpc	r21, r1
    1224:	e1 f0       	breq	.+56     	; 0x125e <udd_ep_alloc+0x84>
    1226:	50 f4       	brcc	.+20     	; 0x123c <udd_ep_alloc+0x62>
    1228:	40 32       	cpi	r20, 0x20	; 32
    122a:	51 05       	cpc	r21, r1
    122c:	a1 f0       	breq	.+40     	; 0x1256 <udd_ep_alloc+0x7c>
    122e:	40 34       	cpi	r20, 0x40	; 64
    1230:	51 05       	cpc	r21, r1
    1232:	99 f0       	breq	.+38     	; 0x125a <udd_ep_alloc+0x80>
    1234:	40 31       	cpi	r20, 0x10	; 16
    1236:	51 05       	cpc	r21, r1
    1238:	61 f4       	brne	.+24     	; 0x1252 <udd_ep_alloc+0x78>
    123a:	19 c0       	rjmp	.+50     	; 0x126e <udd_ep_alloc+0x94>
    123c:	41 15       	cp	r20, r1
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	59 07       	cpc	r21, r25
    1242:	89 f0       	breq	.+34     	; 0x1266 <udd_ep_alloc+0x8c>
    1244:	4f 3f       	cpi	r20, 0xFF	; 255
    1246:	93 e0       	ldi	r25, 0x03	; 3
    1248:	59 07       	cpc	r21, r25
    124a:	79 f0       	breq	.+30     	; 0x126a <udd_ep_alloc+0x90>
    124c:	41 15       	cp	r20, r1
    124e:	51 40       	sbci	r21, 0x01	; 1
    1250:	41 f0       	breq	.+16     	; 0x1262 <udd_ep_alloc+0x88>
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <udd_ep_alloc+0x96>
    1256:	22 e0       	ldi	r18, 0x02	; 2
    1258:	0b c0       	rjmp	.+22     	; 0x1270 <udd_ep_alloc+0x96>
    125a:	23 e0       	ldi	r18, 0x03	; 3
    125c:	09 c0       	rjmp	.+18     	; 0x1270 <udd_ep_alloc+0x96>
    125e:	24 e0       	ldi	r18, 0x04	; 4
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <udd_ep_alloc+0x96>
    1262:	25 e0       	ldi	r18, 0x05	; 5
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <udd_ep_alloc+0x96>
    1266:	26 e0       	ldi	r18, 0x06	; 6
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <udd_ep_alloc+0x96>
    126a:	27 e0       	ldi	r18, 0x07	; 7
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <udd_ep_alloc+0x96>
    126e:	21 e0       	ldi	r18, 0x01	; 1
    1270:	11 82       	std	Z+1, r1	; 0x01
    1272:	96 e0       	ldi	r25, 0x06	; 6
    1274:	90 83       	st	Z, r25
    1276:	82 2b       	or	r24, r18
    1278:	81 83       	std	Z+1, r24	; 0x01
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	80 7c       	andi	r24, 0xC0	; 192
    127e:	80 3c       	cpi	r24, 0xC0	; 192
    1280:	21 f4       	brne	.+8      	; 0x128a <udd_ep_alloc+0xb0>
    1282:	81 81       	ldd	r24, Z+1	; 0x01
    1284:	87 70       	andi	r24, 0x07	; 7
    1286:	87 30       	cpi	r24, 0x07	; 7
    1288:	39 f0       	breq	.+14     	; 0x1298 <udd_ep_alloc+0xbe>
    128a:	81 81       	ldd	r24, Z+1	; 0x01
    128c:	80 62       	ori	r24, 0x20	; 32
    128e:	81 83       	std	Z+1, r24	; 0x01
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	08 95       	ret
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	08 95       	ret

0000129c <udd_ep_is_halted>:
    129c:	e8 2f       	mov	r30, r24
    129e:	ef 70       	andi	r30, 0x0F	; 15
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	ee 0f       	add	r30, r30
    12a4:	ff 1f       	adc	r31, r31
    12a6:	99 27       	eor	r25, r25
    12a8:	87 fd       	sbrc	r24, 7
    12aa:	90 95       	com	r25
    12ac:	88 27       	eor	r24, r24
    12ae:	99 0f       	add	r25, r25
    12b0:	88 1f       	adc	r24, r24
    12b2:	99 27       	eor	r25, r25
    12b4:	e8 0f       	add	r30, r24
    12b6:	f9 1f       	adc	r31, r25
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	e0 5b       	subi	r30, 0xB0	; 176
    12c6:	fe 4d       	sbci	r31, 0xDE	; 222
    12c8:	81 81       	ldd	r24, Z+1	; 0x01
    12ca:	82 fb       	bst	r24, 2
    12cc:	88 27       	eor	r24, r24
    12ce:	80 f9       	bld	r24, 0
    12d0:	08 95       	ret

000012d2 <udd_ep_clear_halt>:
    12d2:	e8 2f       	mov	r30, r24
    12d4:	ef 70       	andi	r30, 0x0F	; 15
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	28 2f       	mov	r18, r24
    12de:	33 27       	eor	r19, r19
    12e0:	27 fd       	sbrc	r18, 7
    12e2:	30 95       	com	r19
    12e4:	22 27       	eor	r18, r18
    12e6:	33 0f       	add	r19, r19
    12e8:	22 1f       	adc	r18, r18
    12ea:	33 27       	eor	r19, r19
    12ec:	e2 0f       	add	r30, r18
    12ee:	f3 1f       	adc	r31, r19
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	e0 5b       	subi	r30, 0xB0	; 176
    12fe:	fe 4d       	sbci	r31, 0xDE	; 222
    1300:	91 81       	ldd	r25, Z+1	; 0x01
    1302:	92 ff       	sbrs	r25, 2
    1304:	0e c0       	rjmp	.+28     	; 0x1322 <udd_ep_clear_halt+0x50>
    1306:	91 81       	ldd	r25, Z+1	; 0x01
    1308:	9b 7f       	andi	r25, 0xFB	; 251
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	39 dd       	rcall	.-1422   	; 0xd80 <udd_ep_get_job>
    130e:	fc 01       	movw	r30, r24
    1310:	80 81       	ld	r24, Z
    1312:	80 ff       	sbrs	r24, 0
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <udd_ep_clear_halt+0x50>
    1316:	8e 7f       	andi	r24, 0xFE	; 254
    1318:	80 83       	st	Z, r24
    131a:	07 80       	ldd	r0, Z+7	; 0x07
    131c:	f0 85       	ldd	r31, Z+8	; 0x08
    131e:	e0 2d       	mov	r30, r0
    1320:	09 95       	icall
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	08 95       	ret

00001326 <udd_ep_run>:
    1326:	7f 92       	push	r7
    1328:	8f 92       	push	r8
    132a:	9f 92       	push	r9
    132c:	af 92       	push	r10
    132e:	bf 92       	push	r11
    1330:	cf 92       	push	r12
    1332:	df 92       	push	r13
    1334:	ef 92       	push	r14
    1336:	ff 92       	push	r15
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	98 2e       	mov	r9, r24
    1342:	86 2e       	mov	r8, r22
    1344:	5a 01       	movw	r10, r20
    1346:	69 01       	movw	r12, r18
    1348:	1b dd       	rcall	.-1482   	; 0xd80 <udd_ep_get_job>
    134a:	7c 01       	movw	r14, r24
    134c:	79 2c       	mov	r7, r9
    134e:	77 1c       	adc	r7, r7
    1350:	77 24       	eor	r7, r7
    1352:	77 1c       	adc	r7, r7
    1354:	c9 2d       	mov	r28, r9
    1356:	cf 70       	andi	r28, 0x0F	; 15
    1358:	d0 e0       	ldi	r29, 0x00	; 0
    135a:	cc 0f       	add	r28, r28
    135c:	dd 1f       	adc	r29, r29
    135e:	c7 0d       	add	r28, r7
    1360:	d1 1d       	adc	r29, r1
    1362:	cc 0f       	add	r28, r28
    1364:	dd 1f       	adc	r29, r29
    1366:	cc 0f       	add	r28, r28
    1368:	dd 1f       	adc	r29, r29
    136a:	cc 0f       	add	r28, r28
    136c:	dd 1f       	adc	r29, r29
    136e:	c0 5b       	subi	r28, 0xB0	; 176
    1370:	de 4d       	sbci	r29, 0xDE	; 222
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	80 7c       	andi	r24, 0xC0	; 192
    1376:	09 f4       	brne	.+2      	; 0x137a <udd_ep_run+0x54>
    1378:	4b c0       	rjmp	.+150    	; 0x1410 <udd_ep_run+0xea>
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	80 7c       	andi	r24, 0xC0	; 192
    137e:	80 3c       	cpi	r24, 0xC0	; 192
    1380:	19 f0       	breq	.+6      	; 0x1388 <udd_ep_run+0x62>
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	82 fd       	sbrc	r24, 2
    1386:	46 c0       	rjmp	.+140    	; 0x1414 <udd_ep_run+0xee>
    1388:	8f b7       	in	r24, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	f7 01       	movw	r30, r14
    138e:	90 81       	ld	r25, Z
    1390:	90 ff       	sbrs	r25, 0
    1392:	03 c0       	rjmp	.+6      	; 0x139a <udd_ep_run+0x74>
    1394:	8f bf       	out	0x3f, r24	; 63
    1396:	71 2c       	mov	r7, r1
    1398:	3e c0       	rjmp	.+124    	; 0x1416 <udd_ep_run+0xf0>
    139a:	f7 01       	movw	r30, r14
    139c:	90 81       	ld	r25, Z
    139e:	91 60       	ori	r25, 0x01	; 1
    13a0:	90 83       	st	Z, r25
    13a2:	8f bf       	out	0x3f, r24	; 63
    13a4:	f7 01       	movw	r30, r14
    13a6:	a1 82       	std	Z+1, r10	; 0x01
    13a8:	b2 82       	std	Z+2, r11	; 0x02
    13aa:	c3 82       	std	Z+3, r12	; 0x03
    13ac:	d4 82       	std	Z+4, r13	; 0x04
    13ae:	15 82       	std	Z+5, r1	; 0x05
    13b0:	16 82       	std	Z+6, r1	; 0x06
    13b2:	07 83       	std	Z+7, r16	; 0x07
    13b4:	10 87       	std	Z+8, r17	; 0x08
    13b6:	81 10       	cpse	r8, r1
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <udd_ep_run+0xa0>
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	c1 14       	cp	r12, r1
    13be:	d1 04       	cpc	r13, r1
    13c0:	19 f0       	breq	.+6      	; 0x13c8 <udd_ep_run+0xa2>
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <udd_ep_run+0xa2>
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	f7 01       	movw	r30, r14
    13ca:	80 81       	ld	r24, Z
    13cc:	90 fb       	bst	r25, 0
    13ce:	81 f9       	bld	r24, 1
    13d0:	8b 7f       	andi	r24, 0xFB	; 251
    13d2:	80 83       	st	Z, r24
    13d4:	77 20       	and	r7, r7
    13d6:	19 f0       	breq	.+6      	; 0x13de <udd_ep_run+0xb8>
    13d8:	1e 82       	std	Y+6, r1	; 0x06
    13da:	1f 82       	std	Y+7, r1	; 0x07
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <udd_ep_run+0xe0>
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	80 7c       	andi	r24, 0xC0	; 192
    13e2:	80 3c       	cpi	r24, 0xC0	; 192
    13e4:	61 f4       	brne	.+24     	; 0x13fe <udd_ep_run+0xd8>
    13e6:	ce 01       	movw	r24, r28
    13e8:	a7 dc       	rcall	.-1714   	; 0xd38 <udd_ep_get_size>
    13ea:	bc 01       	movw	r22, r24
    13ec:	c6 01       	movw	r24, r12
    13ee:	fa d3       	rcall	.+2036   	; 0x1be4 <__udivmodhi4>
    13f0:	89 2b       	or	r24, r25
    13f2:	29 f0       	breq	.+10     	; 0x13fe <udd_ep_run+0xd8>
    13f4:	f7 01       	movw	r30, r14
    13f6:	80 81       	ld	r24, Z
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	80 83       	st	Z, r24
    13fc:	0c c0       	rjmp	.+24     	; 0x1416 <udd_ep_run+0xf0>
    13fe:	1a 82       	std	Y+2, r1	; 0x02
    1400:	1b 82       	std	Y+3, r1	; 0x03
    1402:	1e 82       	std	Y+6, r1	; 0x06
    1404:	1f 82       	std	Y+7, r1	; 0x07
    1406:	89 2d       	mov	r24, r9
    1408:	45 dd       	rcall	.-1398   	; 0xe94 <udd_ep_trans_complet>
    140a:	77 24       	eor	r7, r7
    140c:	73 94       	inc	r7
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <udd_ep_run+0xf0>
    1410:	71 2c       	mov	r7, r1
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <udd_ep_run+0xf0>
    1414:	71 2c       	mov	r7, r1
    1416:	87 2d       	mov	r24, r7
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	df 90       	pop	r13
    1426:	cf 90       	pop	r12
    1428:	bf 90       	pop	r11
    142a:	af 90       	pop	r10
    142c:	9f 90       	pop	r9
    142e:	8f 90       	pop	r8
    1430:	7f 90       	pop	r7
    1432:	08 95       	ret

00001434 <udd_ep_abort>:
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	18 2f       	mov	r17, r24
    1440:	f8 2e       	mov	r15, r24
    1442:	ff 1c       	adc	r15, r15
    1444:	ff 24       	eor	r15, r15
    1446:	ff 1c       	adc	r15, r15
    1448:	c8 2f       	mov	r28, r24
    144a:	cf 70       	andi	r28, 0x0F	; 15
    144c:	d0 e0       	ldi	r29, 0x00	; 0
    144e:	cc 0f       	add	r28, r28
    1450:	dd 1f       	adc	r29, r29
    1452:	cf 0d       	add	r28, r15
    1454:	d1 1d       	adc	r29, r1
    1456:	cc 0f       	add	r28, r28
    1458:	dd 1f       	adc	r29, r29
    145a:	cc 0f       	add	r28, r28
    145c:	dd 1f       	adc	r29, r29
    145e:	cc 0f       	add	r28, r28
    1460:	dd 1f       	adc	r29, r29
    1462:	c0 5b       	subi	r28, 0xB0	; 176
    1464:	de 4d       	sbci	r29, 0xDE	; 222
    1466:	8c dc       	rcall	.-1768   	; 0xd80 <udd_ep_get_job>
    1468:	dc 01       	movw	r26, r24
    146a:	fe 01       	movw	r30, r28
    146c:	02 e0       	ldi	r16, 0x02	; 2
    146e:	05 93       	las	Z, r16
    1470:	8c 91       	ld	r24, X
    1472:	80 ff       	sbrs	r24, 0
    1474:	12 c0       	rjmp	.+36     	; 0x149a <udd_ep_abort+0x66>
    1476:	8e 7f       	andi	r24, 0xFE	; 254
    1478:	8c 93       	st	X, r24
    147a:	17 96       	adiw	r26, 0x07	; 7
    147c:	ed 91       	ld	r30, X+
    147e:	fc 91       	ld	r31, X
    1480:	18 97       	sbiw	r26, 0x08	; 8
    1482:	30 97       	sbiw	r30, 0x00	; 0
    1484:	51 f0       	breq	.+20     	; 0x149a <udd_ep_abort+0x66>
    1486:	ff 20       	and	r15, r15
    1488:	19 f0       	breq	.+6      	; 0x1490 <udd_ep_abort+0x5c>
    148a:	6e 81       	ldd	r22, Y+6	; 0x06
    148c:	7f 81       	ldd	r23, Y+7	; 0x07
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <udd_ep_abort+0x60>
    1490:	6a 81       	ldd	r22, Y+2	; 0x02
    1492:	7b 81       	ldd	r23, Y+3	; 0x03
    1494:	41 2f       	mov	r20, r17
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	09 95       	icall
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	08 95       	ret

000014a6 <udd_ep_free>:
    14a6:	cf 93       	push	r28
    14a8:	c8 2f       	mov	r28, r24
    14aa:	c4 df       	rcall	.-120    	; 0x1434 <udd_ep_abort>
    14ac:	ec 2f       	mov	r30, r28
    14ae:	ef 70       	andi	r30, 0x0F	; 15
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	8c 2f       	mov	r24, r28
    14b8:	99 27       	eor	r25, r25
    14ba:	87 fd       	sbrc	r24, 7
    14bc:	90 95       	com	r25
    14be:	88 27       	eor	r24, r24
    14c0:	99 0f       	add	r25, r25
    14c2:	88 1f       	adc	r24, r24
    14c4:	99 27       	eor	r25, r25
    14c6:	e8 0f       	add	r30, r24
    14c8:	f9 1f       	adc	r31, r25
    14ca:	ee 0f       	add	r30, r30
    14cc:	ff 1f       	adc	r31, r31
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	e0 5b       	subi	r30, 0xB0	; 176
    14d8:	fe 4d       	sbci	r31, 0xDE	; 222
    14da:	11 82       	std	Z+1, r1	; 0x01
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <udd_ep_set_halt>:
    14e0:	0f 93       	push	r16
    14e2:	e8 2f       	mov	r30, r24
    14e4:	ef 70       	andi	r30, 0x0F	; 15
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	ee 0f       	add	r30, r30
    14ea:	ff 1f       	adc	r31, r31
    14ec:	28 2f       	mov	r18, r24
    14ee:	33 27       	eor	r19, r19
    14f0:	27 fd       	sbrc	r18, 7
    14f2:	30 95       	com	r19
    14f4:	22 27       	eor	r18, r18
    14f6:	33 0f       	add	r19, r19
    14f8:	22 1f       	adc	r18, r18
    14fa:	33 27       	eor	r19, r19
    14fc:	e2 0f       	add	r30, r18
    14fe:	f3 1f       	adc	r31, r19
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	ee 0f       	add	r30, r30
    1506:	ff 1f       	adc	r31, r31
    1508:	ee 0f       	add	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	e0 5b       	subi	r30, 0xB0	; 176
    150e:	fe 4d       	sbci	r31, 0xDE	; 222
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	94 60       	ori	r25, 0x04	; 4
    1514:	91 83       	std	Z+1, r25	; 0x01
    1516:	01 e0       	ldi	r16, 0x01	; 1
    1518:	06 93       	lac	Z, r16
    151a:	8c df       	rcall	.-232    	; 0x1434 <udd_ep_abort>
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	0f 92       	push	r0
    152a:	11 24       	eor	r1, r1
    152c:	0f 93       	push	r16
    152e:	2f 93       	push	r18
    1530:	3f 93       	push	r19
    1532:	4f 93       	push	r20
    1534:	5f 93       	push	r21
    1536:	6f 93       	push	r22
    1538:	7f 93       	push	r23
    153a:	8f 93       	push	r24
    153c:	9f 93       	push	r25
    153e:	af 93       	push	r26
    1540:	bf 93       	push	r27
    1542:	ef 93       	push	r30
    1544:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    1546:	80 91 cb 04 	lds	r24, 0x04CB
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <__vector_125+0x36>
		udd_ack_start_of_frame_event();
    154e:	80 e8       	ldi	r24, 0x80	; 128
    1550:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    1554:	29 d8       	rcall	.-4014   	; 0x5a8 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1556:	84 c0       	rjmp	.+264    	; 0x1660 <__vector_125+0x13e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    1558:	80 91 cb 04 	lds	r24, 0x04CB
    155c:	82 ff       	sbrs	r24, 2
    155e:	20 c0       	rjmp	.+64     	; 0x15a0 <__vector_125+0x7e>
		udd_ack_underflow_event();
    1560:	84 e0       	ldi	r24, 0x04	; 4
    1562:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    1566:	80 91 58 21 	lds	r24, 0x2158
    156a:	86 ff       	sbrs	r24, 6
    156c:	79 c0       	rjmp	.+242    	; 0x1660 <__vector_125+0x13e>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    156e:	80 91 cc 04 	lds	r24, 0x04CC
    1572:	81 fd       	sbrc	r24, 1
    1574:	75 c0       	rjmp	.+234    	; 0x1660 <__vector_125+0x13e>
    1576:	1f dc       	rcall	.-1986   	; 0xdb6 <udd_ctrl_interrupt_tc_setup>
    1578:	81 11       	cpse	r24, r1
    157a:	72 c0       	rjmp	.+228    	; 0x1660 <__vector_125+0x13e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    157c:	80 91 45 21 	lds	r24, 0x2145
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	11 f4       	brne	.+4      	; 0x1588 <__vector_125+0x66>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    1584:	55 db       	rcall	.-2390   	; 0xc30 <udd_ctrl_send_zlp_in>
    1586:	6c c0       	rjmp	.+216    	; 0x1660 <__vector_125+0x13e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	09 f0       	breq	.+2      	; 0x158e <__vector_125+0x6c>
    158c:	69 c0       	rjmp	.+210    	; 0x1660 <__vector_125+0x13e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    158e:	e9 e5       	ldi	r30, 0x59	; 89
    1590:	f1 e2       	ldi	r31, 0x21	; 33
    1592:	04 e0       	ldi	r16, 0x04	; 4
    1594:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1596:	e1 e5       	ldi	r30, 0x51	; 81
    1598:	f1 e2       	ldi	r31, 0x21	; 33
    159a:	04 e0       	ldi	r16, 0x04	; 4
    159c:	05 93       	las	Z, r16
    159e:	60 c0       	rjmp	.+192    	; 0x1660 <__vector_125+0x13e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    15a0:	80 91 cb 04 	lds	r24, 0x04CB
    15a4:	81 ff       	sbrs	r24, 1
    15a6:	57 c0       	rjmp	.+174    	; 0x1656 <__vector_125+0x134>
		udd_ack_overflow_event();
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    15ae:	80 91 50 21 	lds	r24, 0x2150
    15b2:	86 ff       	sbrs	r24, 6
    15b4:	55 c0       	rjmp	.+170    	; 0x1660 <__vector_125+0x13e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    15b6:	80 91 cc 04 	lds	r24, 0x04CC
    15ba:	81 fd       	sbrc	r24, 1
    15bc:	51 c0       	rjmp	.+162    	; 0x1660 <__vector_125+0x13e>
    15be:	fb db       	rcall	.-2058   	; 0xdb6 <udd_ctrl_interrupt_tc_setup>
    15c0:	81 11       	cpse	r24, r1
    15c2:	4e c0       	rjmp	.+156    	; 0x1660 <__vector_125+0x13e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    15c4:	80 91 45 21 	lds	r24, 0x2145
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	41 f4       	brne	.+16     	; 0x15dc <__vector_125+0xba>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    15cc:	84 e0       	ldi	r24, 0x04	; 4
    15ce:	80 93 45 21 	sts	0x2145, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    15d2:	e0 e5       	ldi	r30, 0x50	; 80
    15d4:	f1 e2       	ldi	r31, 0x21	; 33
    15d6:	02 e0       	ldi	r16, 0x02	; 2
    15d8:	06 93       	lac	Z, r16
    15da:	42 c0       	rjmp	.+132    	; 0x1660 <__vector_125+0x13e>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    15dc:	83 30       	cpi	r24, 0x03	; 3
    15de:	09 f0       	breq	.+2      	; 0x15e2 <__vector_125+0xc0>
    15e0:	3f c0       	rjmp	.+126    	; 0x1660 <__vector_125+0x13e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    15e2:	e9 e5       	ldi	r30, 0x59	; 89
    15e4:	f1 e2       	ldi	r31, 0x21	; 33
    15e6:	04 e0       	ldi	r16, 0x04	; 4
    15e8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    15ea:	e1 e5       	ldi	r30, 0x51	; 81
    15ec:	f1 e2       	ldi	r31, 0x21	; 33
    15ee:	04 e0       	ldi	r16, 0x04	; 4
    15f0:	05 93       	las	Z, r16
    15f2:	36 c0       	rjmp	.+108    	; 0x1660 <__vector_125+0x13e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    15f4:	80 e1       	ldi	r24, 0x10	; 16
    15f6:	80 93 ca 04 	sts	0x04CA, r24
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
			udd_ep_abort(i | USB_EP_DIR_IN);
		}
#endif
		udc_reset();
    15fa:	0e 94 af 02 	call	0x55e	; 0x55e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    15fe:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1602:	e1 e5       	ldi	r30, 0x51	; 81
    1604:	f1 e2       	ldi	r31, 0x21	; 33
    1606:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1608:	96 e0       	ldi	r25, 0x06	; 6
    160a:	90 93 50 21 	sts	0x2150, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    160e:	80 e4       	ldi	r24, 0x40	; 64
    1610:	80 83       	st	Z, r24
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1612:	e9 e5       	ldi	r30, 0x59	; 89
    1614:	f1 e2       	ldi	r31, 0x21	; 33
    1616:	10 82       	st	Z, r1
	udd_endpoint_clear_status(ep_ctrl);
    1618:	90 93 58 21 	sts	0x2158, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    161c:	80 83       	st	Z, r24
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    161e:	89 e3       	ldi	r24, 0x39	; 57
    1620:	91 e2       	ldi	r25, 0x21	; 33
    1622:	80 93 54 21 	sts	0x2154, r24
    1626:	90 93 55 21 	sts	0x2155, r25
		// Reset endpoint control management
		udd_ctrl_init();
    162a:	c9 da       	rcall	.-2670   	; 0xbbe <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    162c:	19 c0       	rjmp	.+50     	; 0x1660 <__vector_125+0x13e>
	}

	if (udd_is_suspend_event()) {
    162e:	80 91 cb 04 	lds	r24, 0x04CB
    1632:	86 ff       	sbrs	r24, 6
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <__vector_125+0x120>
		udd_ack_suspend_event();
    1636:	80 e4       	ldi	r24, 0x40	; 64
    1638:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	a0 da       	rcall	.-2752   	; 0xb80 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <__vector_125+0x13e>
	}

	if (udd_is_resume_event()) {
    1642:	80 91 cb 04 	lds	r24, 0x04CB
    1646:	85 ff       	sbrs	r24, 5
    1648:	0b c0       	rjmp	.+22     	; 0x1660 <__vector_125+0x13e>
		udd_ack_resume_event();
    164a:	80 e2       	ldi	r24, 0x20	; 32
    164c:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	96 da       	rcall	.-2772   	; 0xb80 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1654:	05 c0       	rjmp	.+10     	; 0x1660 <__vector_125+0x13e>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    1656:	80 91 cb 04 	lds	r24, 0x04CB
    165a:	84 ff       	sbrs	r24, 4
    165c:	e8 cf       	rjmp	.-48     	; 0x162e <__vector_125+0x10c>
    165e:	ca cf       	rjmp	.-108    	; 0x15f4 <__vector_125+0xd2>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 91       	pop	r16
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	0f 93       	push	r16
    1690:	1f 93       	push	r17
    1692:	2f 93       	push	r18
    1694:	3f 93       	push	r19
    1696:	4f 93       	push	r20
    1698:	5f 93       	push	r21
    169a:	6f 93       	push	r22
    169c:	7f 93       	push	r23
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	af 93       	push	r26
    16a4:	bf 93       	push	r27
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	ef 93       	push	r30
    16ac:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    16ae:	80 91 cc 04 	lds	r24, 0x04CC
    16b2:	81 fd       	sbrc	r24, 1
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    16b6:	7f db       	rcall	.-2306   	; 0xdb6 <udd_ctrl_interrupt_tc_setup>
    16b8:	81 11       	cpse	r24, r1
    16ba:	b7 c0       	rjmp	.+366    	; 0x182a <__vector_126+0x1a6>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    16c2:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    16c6:	81 95       	neg	r24
    16c8:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    16ca:	e0 e5       	ldi	r30, 0x50	; 80
    16cc:	f1 e2       	ldi	r31, 0x21	; 33
    16ce:	e8 1b       	sub	r30, r24
    16d0:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    16d2:	20 81       	ld	r18, Z
    16d4:	31 81       	ldd	r19, Z+1	; 0x01
    16d6:	20 55       	subi	r18, 0x50	; 80
    16d8:	31 42       	sbci	r19, 0x21	; 33
    16da:	36 95       	lsr	r19
    16dc:	27 95       	ror	r18
    16de:	36 95       	lsr	r19
    16e0:	27 95       	ror	r18
    16e2:	36 95       	lsr	r19
    16e4:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    16e6:	82 2f       	mov	r24, r18
    16e8:	86 95       	lsr	r24
    16ea:	20 ff       	sbrs	r18, 0
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <__vector_126+0x6e>
    16ee:	90 e8       	ldi	r25, 0x80	; 128
    16f0:	01 c0       	rjmp	.+2      	; 0x16f4 <__vector_126+0x70>
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    16f6:	e8 2f       	mov	r30, r24
    16f8:	ef 70       	andi	r30, 0x0F	; 15
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	ee 0f       	add	r30, r30
    16fe:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1700:	28 2f       	mov	r18, r24
    1702:	33 27       	eor	r19, r19
    1704:	27 fd       	sbrc	r18, 7
    1706:	30 95       	com	r19
    1708:	22 27       	eor	r18, r18
    170a:	33 0f       	add	r19, r19
    170c:	22 1f       	adc	r18, r18
    170e:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1710:	e2 0f       	add	r30, r18
    1712:	f3 1f       	adc	r31, r19
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
    1714:	ee 0f       	add	r30, r30
    1716:	ff 1f       	adc	r31, r31
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	e0 5b       	subi	r30, 0xB0	; 176
    1722:	fe 4d       	sbci	r31, 0xDE	; 222
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    1724:	90 81       	ld	r25, Z
    1726:	95 ff       	sbrs	r25, 5
    1728:	80 c0       	rjmp	.+256    	; 0x182a <__vector_126+0x1a6>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    172a:	00 e2       	ldi	r16, 0x20	; 32
    172c:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    172e:	81 11       	cpse	r24, r1
    1730:	77 c0       	rjmp	.+238    	; 0x1820 <__vector_126+0x19c>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    1732:	80 91 45 21 	lds	r24, 0x2145
    1736:	84 30       	cpi	r24, 0x04	; 4
    1738:	19 f4       	brne	.+6      	; 0x1740 <__vector_126+0xbc>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    173a:	88 da       	rcall	.-2800   	; 0xc4c <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    173c:	40 da       	rcall	.-2944   	; 0xbbe <udd_ctrl_init>
    173e:	75 c0       	rjmp	.+234    	; 0x182a <__vector_126+0x1a6>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    1740:	c0 91 52 21 	lds	r28, 0x2152
    1744:	d0 91 53 21 	lds	r29, 0x2153

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    1748:	80 91 80 21 	lds	r24, 0x2180
    174c:	90 91 81 21 	lds	r25, 0x2181
    1750:	00 91 41 21 	lds	r16, 0x2141
    1754:	10 91 42 21 	lds	r17, 0x2142
    1758:	98 01       	movw	r18, r16
    175a:	2c 0f       	add	r18, r28
    175c:	3d 1f       	adc	r19, r29
    175e:	82 17       	cp	r24, r18
    1760:	93 07       	cpc	r25, r19
    1762:	18 f4       	brcc	.+6      	; 0x176a <__vector_126+0xe6>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1764:	ec 01       	movw	r28, r24
    1766:	c0 1b       	sub	r28, r16
    1768:	d1 0b       	sbc	r29, r17
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    176a:	80 91 7e 21 	lds	r24, 0x217E
    176e:	90 91 7f 21 	lds	r25, 0x217F
    1772:	ae 01       	movw	r20, r28
    1774:	69 e3       	ldi	r22, 0x39	; 57
    1776:	71 e2       	ldi	r23, 0x21	; 33
    1778:	80 0f       	add	r24, r16
    177a:	91 1f       	adc	r25, r17
    177c:	4d d2       	rcall	.+1178   	; 0x1c18 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    177e:	0c 0f       	add	r16, r28
    1780:	1d 1f       	adc	r17, r29
    1782:	00 93 41 21 	sts	0x2141, r16
    1786:	10 93 42 21 	sts	0x2142, r17

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    178a:	28 97       	sbiw	r28, 0x08	; 8
    178c:	69 f4       	brne	.+26     	; 0x17a8 <__vector_126+0x124>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    178e:	80 91 43 21 	lds	r24, 0x2143
    1792:	90 91 44 21 	lds	r25, 0x2144
    1796:	80 0f       	add	r24, r16
    1798:	91 1f       	adc	r25, r17

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    179a:	20 91 7c 21 	lds	r18, 0x217C
    179e:	30 91 7d 21 	lds	r19, 0x217D
    17a2:	82 17       	cp	r24, r18
    17a4:	93 07       	cpc	r25, r19
    17a6:	88 f0       	brcs	.+34     	; 0x17ca <__vector_126+0x146>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    17a8:	00 93 80 21 	sts	0x2180, r16
    17ac:	10 93 81 21 	sts	0x2181, r17
		if (NULL != udd_g_ctrlreq.over_under_run) {
    17b0:	e0 91 84 21 	lds	r30, 0x2184
    17b4:	f0 91 85 21 	lds	r31, 0x2185
    17b8:	30 97       	sbiw	r30, 0x00	; 0
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <__vector_126+0x142>
			if (!udd_g_ctrlreq.over_under_run()) {
    17bc:	09 95       	icall
    17be:	81 11       	cpse	r24, r1
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <__vector_126+0x142>
				// Stall ZLP
				udd_ctrl_stall_data();
    17c2:	28 da       	rcall	.-2992   	; 0xc14 <udd_ctrl_stall_data>
    17c4:	32 c0       	rjmp	.+100    	; 0x182a <__vector_126+0x1a6>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    17c6:	34 da       	rcall	.-2968   	; 0xc30 <udd_ctrl_send_zlp_in>
    17c8:	30 c0       	rjmp	.+96     	; 0x182a <__vector_126+0x1a6>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    17ca:	80 91 80 21 	lds	r24, 0x2180
    17ce:	90 91 81 21 	lds	r25, 0x2181
    17d2:	08 17       	cp	r16, r24
    17d4:	19 07       	cpc	r17, r25
    17d6:	f9 f4       	brne	.+62     	; 0x1816 <__vector_126+0x192>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    17d8:	e0 91 84 21 	lds	r30, 0x2184
    17dc:	f0 91 85 21 	lds	r31, 0x2185
    17e0:	30 97       	sbiw	r30, 0x00	; 0
    17e2:	11 f4       	brne	.+4      	; 0x17e8 <__vector_126+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    17e4:	17 da       	rcall	.-3026   	; 0xc14 <udd_ctrl_stall_data>
    17e6:	21 c0       	rjmp	.+66     	; 0x182a <__vector_126+0x1a6>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    17e8:	09 95       	icall
    17ea:	81 11       	cpse	r24, r1
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <__vector_126+0x16e>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    17ee:	12 da       	rcall	.-3036   	; 0xc14 <udd_ctrl_stall_data>
    17f0:	1c c0       	rjmp	.+56     	; 0x182a <__vector_126+0x1a6>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    17f2:	20 91 43 21 	lds	r18, 0x2143
    17f6:	30 91 44 21 	lds	r19, 0x2144
    17fa:	80 91 41 21 	lds	r24, 0x2141
    17fe:	90 91 42 21 	lds	r25, 0x2142
    1802:	82 0f       	add	r24, r18
    1804:	93 1f       	adc	r25, r19
    1806:	80 93 43 21 	sts	0x2143, r24
    180a:	90 93 44 21 	sts	0x2144, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    180e:	10 92 41 21 	sts	0x2141, r1
    1812:	10 92 42 21 	sts	0x2142, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1816:	e0 e5       	ldi	r30, 0x50	; 80
    1818:	f1 e2       	ldi	r31, 0x21	; 33
    181a:	02 e0       	ldi	r16, 0x02	; 2
    181c:	06 93       	lac	Z, r16
    181e:	05 c0       	rjmp	.+10     	; 0x182a <__vector_126+0x1a6>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1820:	80 38       	cpi	r24, 0x80	; 128
    1822:	11 f4       	brne	.+4      	; 0x1828 <__vector_126+0x1a4>
		udd_ctrl_in_sent();
    1824:	1b da       	rcall	.-3018   	; 0xc5c <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1826:	01 c0       	rjmp	.+2      	; 0x182a <__vector_126+0x1a6>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1828:	35 db       	rcall	.-2454   	; 0xe94 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    182a:	ff 91       	pop	r31
    182c:	ef 91       	pop	r30
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    185a:	40 91 76 21 	lds	r20, 0x2176
    185e:	44 23       	and	r20, r20
    1860:	0c f0       	brlt	.+2      	; 0x1864 <udi_hid_setup+0x10>
    1862:	63 c0       	rjmp	.+198    	; 0x192a <udi_hid_setup+0xd6>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1864:	40 76       	andi	r20, 0x60	; 96
    1866:	09 f0       	breq	.+2      	; 0x186a <udi_hid_setup+0x16>
    1868:	41 c0       	rjmp	.+130    	; 0x18ec <udi_hid_setup+0x98>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    186a:	20 91 77 21 	lds	r18, 0x2177
    186e:	26 30       	cpi	r18, 0x06	; 6
    1870:	e9 f5       	brne	.+122    	; 0x18ec <udi_hid_setup+0x98>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1872:	0e 94 a8 02 	call	0x550	; 0x550 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1876:	fc 01       	movw	r30, r24
    1878:	22 85       	ldd	r18, Z+10	; 0x0a
    187a:	21 32       	cpi	r18, 0x21	; 33
    187c:	99 f5       	brne	.+102    	; 0x18e4 <udi_hid_setup+0x90>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    187e:	20 91 79 21 	lds	r18, 0x2179
    1882:	21 32       	cpi	r18, 0x21	; 33
    1884:	b9 f4       	brne	.+46     	; 0x18b4 <udi_hid_setup+0x60>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    1886:	9c 01       	movw	r18, r24
    1888:	27 5f       	subi	r18, 0xF7	; 247
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    188c:	20 93 7e 21 	sts	0x217E, r18
    1890:	30 93 7f 21 	sts	0x217F, r19
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    1894:	81 85       	ldd	r24, Z+9	; 0x09
    1896:	20 91 7c 21 	lds	r18, 0x217C
    189a:	30 91 7d 21 	lds	r19, 0x217D
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	28 17       	cp	r18, r24
    18a2:	39 07       	cpc	r19, r25
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <udi_hid_setup+0x54>
    18a6:	c9 01       	movw	r24, r18
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    18a8:	80 93 80 21 	sts	0x2180, r24
    18ac:	90 93 81 21 	sts	0x2181, r25
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	64 c0       	rjmp	.+200    	; 0x197c <udi_hid_setup+0x128>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    18b4:	fc 01       	movw	r30, r24
    18b6:	37 85       	ldd	r19, Z+15	; 0x0f
    18b8:	23 13       	cpse	r18, r19
    18ba:	16 c0       	rjmp	.+44     	; 0x18e8 <udi_hid_setup+0x94>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    18bc:	c0 93 7e 21 	sts	0x217E, r28
    18c0:	d0 93 7f 21 	sts	0x217F, r29
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    18c4:	20 89       	ldd	r18, Z+16	; 0x10
    18c6:	31 89       	ldd	r19, Z+17	; 0x11
    18c8:	80 91 7c 21 	lds	r24, 0x217C
    18cc:	90 91 7d 21 	lds	r25, 0x217D
    18d0:	28 17       	cp	r18, r24
    18d2:	39 07       	cpc	r19, r25
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <udi_hid_setup+0x84>
    18d6:	c9 01       	movw	r24, r18
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    18d8:	80 93 80 21 	sts	0x2180, r24
    18dc:	90 93 81 21 	sts	0x2181, r25
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	4c c0       	rjmp	.+152    	; 0x197c <udi_hid_setup+0x128>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	4a c0       	rjmp	.+148    	; 0x197c <udi_hid_setup+0x128>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    18e8:	80 e0       	ldi	r24, 0x00	; 0
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    18ea:	48 c0       	rjmp	.+144    	; 0x197c <udi_hid_setup+0x128>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    18ec:	40 32       	cpi	r20, 0x20	; 32
    18ee:	e9 f5       	brne	.+122    	; 0x196a <udi_hid_setup+0x116>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    18f0:	20 91 77 21 	lds	r18, 0x2177
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	19 f0       	breq	.+6      	; 0x18fe <udi_hid_setup+0xaa>
    18f8:	23 30       	cpi	r18, 0x03	; 3
    18fa:	61 f0       	breq	.+24     	; 0x1914 <udi_hid_setup+0xc0>
    18fc:	38 c0       	rjmp	.+112    	; 0x196e <udi_hid_setup+0x11a>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    18fe:	80 93 7e 21 	sts	0x217E, r24
    1902:	90 93 7f 21 	sts	0x217F, r25
				udd_g_ctrlreq.payload_size = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	80 93 80 21 	sts	0x2180, r24
    190e:	90 93 81 21 	sts	0x2181, r25
				return true;
    1912:	34 c0       	rjmp	.+104    	; 0x197c <udi_hid_setup+0x128>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1914:	60 93 7e 21 	sts	0x217E, r22
    1918:	70 93 7f 21 	sts	0x217F, r23
				udd_g_ctrlreq.payload_size = 1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	80 93 80 21 	sts	0x2180, r24
    1924:	90 93 81 21 	sts	0x2181, r25
				return true;
    1928:	29 c0       	rjmp	.+82     	; 0x197c <udi_hid_setup+0x128>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    192a:	40 76       	andi	r20, 0x60	; 96
    192c:	40 32       	cpi	r20, 0x20	; 32
    192e:	09 f5       	brne	.+66     	; 0x1972 <udi_hid_setup+0x11e>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1930:	40 91 77 21 	lds	r20, 0x2177
    1934:	4a 30       	cpi	r20, 0x0A	; 10
    1936:	39 f0       	breq	.+14     	; 0x1946 <udi_hid_setup+0xf2>
    1938:	4b 30       	cpi	r20, 0x0B	; 11
    193a:	59 f0       	breq	.+22     	; 0x1952 <udi_hid_setup+0xfe>
    193c:	49 30       	cpi	r20, 0x09	; 9
    193e:	d9 f4       	brne	.+54     	; 0x1976 <udi_hid_setup+0x122>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
    1940:	f9 01       	movw	r30, r18
    1942:	09 95       	icall
    1944:	1b c0       	rjmp	.+54     	; 0x197c <udi_hid_setup+0x128>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1946:	20 91 79 21 	lds	r18, 0x2179
    194a:	fc 01       	movw	r30, r24
    194c:	20 83       	st	Z, r18
				return true;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	15 c0       	rjmp	.+42     	; 0x197c <udi_hid_setup+0x128>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1952:	80 91 7c 21 	lds	r24, 0x217C
    1956:	90 91 7d 21 	lds	r25, 0x217D
    195a:	89 2b       	or	r24, r25
    195c:	71 f4       	brne	.+28     	; 0x197a <udi_hid_setup+0x126>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    195e:	80 91 78 21 	lds	r24, 0x2178
    1962:	fb 01       	movw	r30, r22
    1964:	80 83       	st	Z, r24
				return true;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	09 c0       	rjmp	.+18     	; 0x197c <udi_hid_setup+0x128>
			}
		}
	}
	return false;	// Request not supported
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	07 c0       	rjmp	.+14     	; 0x197c <udi_hid_setup+0x128>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	05 c0       	rjmp	.+10     	; 0x197c <udi_hid_setup+0x128>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	03 c0       	rjmp	.+6      	; 0x197c <udi_hid_setup+0x128>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	01 c0       	rjmp	.+2      	; 0x197c <udi_hid_setup+0x128>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    197a:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	08 95       	ret

00001982 <sysclk_init>:
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	00 d0       	rcall	.+0      	; 0x1988 <sysclk_init+0x6>
    1988:	00 d0       	rcall	.+0      	; 0x198a <sysclk_init+0x8>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	80 93 70 00 	sts	0x0070, r24
    1994:	80 93 71 00 	sts	0x0071, r24
    1998:	80 93 72 00 	sts	0x0072, r24
    199c:	80 93 73 00 	sts	0x0073, r24
    19a0:	80 93 74 00 	sts	0x0074, r24
    19a4:	80 93 75 00 	sts	0x0075, r24
    19a8:	80 93 76 00 	sts	0x0076, r24
    19ac:	6c e1       	ldi	r22, 0x1C	; 28
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	8b d0       	rcall	.+278    	; 0x1aca <nvm_read_byte>
    19b4:	8a 83       	std	Y+2, r24	; 0x02
    19b6:	6d e1       	ldi	r22, 0x1D	; 29
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	82 e0       	ldi	r24, 0x02	; 2
    19bc:	86 d0       	rcall	.+268    	; 0x1aca <nvm_read_byte>
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	21 f4       	brne	.+8      	; 0x19d0 <sysclk_init+0x4e>
    19c8:	80 e4       	ldi	r24, 0x40	; 64
    19ca:	93 e2       	ldi	r25, 0x23	; 35
    19cc:	89 83       	std	Y+1, r24	; 0x01
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	e0 e6       	ldi	r30, 0x60	; 96
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	82 83       	std	Z+2, r24	; 0x02
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	83 83       	std	Z+3, r24	; 0x03
    19e2:	e0 e5       	ldi	r30, 0x50	; 80
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	81 81       	ldd	r24, Z+1	; 0x01
    19e8:	84 fd       	sbrc	r24, 4
    19ea:	0b c0       	rjmp	.+22     	; 0x1a02 <sysclk_init+0x80>
    19ec:	8f b7       	in	r24, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	90 e1       	ldi	r25, 0x10	; 16
    19f2:	95 83       	std	Z+5, r25	; 0x05
    19f4:	90 81       	ld	r25, Z
    19f6:	90 61       	ori	r25, 0x10	; 16
    19f8:	90 83       	st	Z, r25
    19fa:	8f bf       	out	0x3f, r24	; 63
    19fc:	81 81       	ldd	r24, Z+1	; 0x01
    19fe:	84 ff       	sbrs	r24, 4
    1a00:	fd cf       	rjmp	.-6      	; 0x19fc <sysclk_init+0x7a>
    1a02:	64 e0       	ldi	r22, 0x04	; 4
    1a04:	80 e4       	ldi	r24, 0x40	; 64
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	6a d0       	rcall	.+212    	; 0x1ade <ccp_write_io>
    1a0a:	8f b7       	in	r24, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	e0 e5       	ldi	r30, 0x50	; 80
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	90 81       	ld	r25, Z
    1a14:	94 60       	ori	r25, 0x04	; 4
    1a16:	90 83       	st	Z, r25
    1a18:	8f bf       	out	0x3f, r24	; 63
    1a1a:	81 81       	ldd	r24, Z+1	; 0x01
    1a1c:	82 ff       	sbrs	r24, 2
    1a1e:	fd cf       	rjmp	.-6      	; 0x1a1a <sysclk_init+0x98>
    1a20:	8f b7       	in	r24, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	e0 e5       	ldi	r30, 0x50	; 80
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	96 81       	ldd	r25, Z+6	; 0x06
    1a2a:	9e 7f       	andi	r25, 0xFE	; 254
    1a2c:	96 83       	std	Z+6, r25	; 0x06
    1a2e:	e8 e6       	ldi	r30, 0x68	; 104
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	90 81       	ld	r25, Z
    1a34:	91 60       	ori	r25, 0x01	; 1
    1a36:	90 83       	st	Z, r25
    1a38:	8f bf       	out	0x3f, r24	; 63
    1a3a:	24 96       	adiw	r28, 0x04	; 4
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <sysclk_enable_module>:
    1a46:	9f b7       	in	r25, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	e8 2f       	mov	r30, r24
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	e0 59       	subi	r30, 0x90	; 144
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	60 95       	com	r22
    1a54:	80 81       	ld	r24, Z
    1a56:	68 23       	and	r22, r24
    1a58:	60 83       	st	Z, r22
    1a5a:	9f bf       	out	0x3f, r25	; 63
    1a5c:	08 95       	ret

00001a5e <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1a5e:	86 30       	cpi	r24, 0x06	; 6
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
    1a62:	68 e1       	ldi	r22, 0x18	; 24
    1a64:	01 c0       	rjmp	.+2      	; 0x1a68 <sysclk_enable_usb+0xa>
	}
	else {
		prescaler = 0;
    1a66:	60 e0       	ldi	r22, 0x00	; 0

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1a68:	e0 e5       	ldi	r30, 0x50	; 80
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	81 81       	ldd	r24, Z+1	; 0x01
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1a6e:	81 fd       	sbrc	r24, 1
    1a70:	24 c0       	rjmp	.+72     	; 0x1aba <sysclk_enable_usb+0x5c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a72:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1a74:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1a76:	90 81       	ld	r25, Z
    1a78:	92 60       	ori	r25, 0x02	; 2
    1a7a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a7c:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1a7e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1a80:	81 ff       	sbrs	r24, 1
    1a82:	fd cf       	rjmp	.-6      	; 0x1a7e <sysclk_enable_usb+0x20>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1a84:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1a86:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1a88:	a0 e5       	ldi	r26, 0x50	; 80
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	16 96       	adiw	r26, 0x06	; 6
    1a8e:	9c 91       	ld	r25, X
    1a90:	16 97       	sbiw	r26, 0x06	; 6
    1a92:	99 7f       	andi	r25, 0xF9	; 249
    1a94:	16 96       	adiw	r26, 0x06	; 6
    1a96:	9c 93       	st	X, r25
    1a98:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1a9a:	e0 e6       	ldi	r30, 0x60	; 96
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	90 e8       	ldi	r25, 0x80	; 128
    1aa0:	95 83       	std	Z+5, r25	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1aa2:	9b eb       	ldi	r25, 0xBB	; 187
    1aa4:	96 83       	std	Z+6, r25	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1aa6:	16 96       	adiw	r26, 0x06	; 6
    1aa8:	9c 91       	ld	r25, X
    1aaa:	16 97       	sbiw	r26, 0x06	; 6
    1aac:	94 60       	ori	r25, 0x04	; 4
    1aae:	16 96       	adiw	r26, 0x06	; 6
    1ab0:	9c 93       	st	X, r25
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1ab2:	90 81       	ld	r25, Z
    1ab4:	91 60       	ori	r25, 0x01	; 1
    1ab6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1ab8:	8f bf       	out	0x3f, r24	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1aba:	63 60       	ori	r22, 0x03	; 3
    1abc:	84 e4       	ldi	r24, 0x44	; 68
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e d0       	rcall	.+28     	; 0x1ade <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1ac2:	60 e4       	ldi	r22, 0x40	; 64
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	bf cf       	rjmp	.-130    	; 0x1a46 <sysclk_enable_module>
    1ac8:	08 95       	ret

00001aca <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1aca:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1ace:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1ad0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1ad2:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1ad6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1ad8:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1adc:	08 95       	ret

00001ade <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1ade:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1ae0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1ae2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1ae4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1ae6:	60 83       	st	Z, r22
	ret                             // Return to caller
    1ae8:	08 95       	ret

00001aea <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1aea:	08 95       	ret

00001aec <main>:
	}
}

void usb_init(void)
{
	udc_start();
    1aec:	e0 e6       	ldi	r30, 0x60	; 96
    1aee:	f6 e0       	ldi	r31, 0x06	; 6
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	80 83       	st	Z, r24
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	86 83       	std	Z+6, r24	; 0x06
    1af8:	a0 e4       	ldi	r26, 0x40	; 64
    1afa:	b6 e0       	ldi	r27, 0x06	; 6
    1afc:	1c 92       	st	X, r1
    1afe:	c0 eb       	ldi	r28, 0xB0	; 176
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	88 83       	st	Y, r24
    1b06:	90 e1       	ldi	r25, 0x10	; 16
    1b08:	50 96       	adiw	r26, 0x10	; 16
    1b0a:	9c 93       	st	X, r25
    1b0c:	a0 e0       	ldi	r26, 0x00	; 0
    1b0e:	b6 e0       	ldi	r27, 0x06	; 6
    1b10:	1c 92       	st	X, r1
    1b12:	88 83       	st	Y, r24
    1b14:	50 96       	adiw	r26, 0x10	; 16
    1b16:	9c 93       	st	X, r25
    1b18:	84 83       	std	Z+4, r24	; 0x04
    1b1a:	33 df       	rcall	.-410    	; 0x1982 <sysclk_init>
    1b1c:	87 e0       	ldi	r24, 0x07	; 7
    1b1e:	e0 ea       	ldi	r30, 0xA0	; 160
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	82 83       	std	Z+2, r24	; 0x02
    1b24:	78 94       	sei
    1b26:	e1 df       	rcall	.-62     	; 0x1aea <board_init>
    1b28:	0e 94 ad 02 	call	0x55a	; 0x55a <udc_start>
    1b2c:	c1 da       	rcall	.-2686   	; 0x10b0 <udd_attach>
    1b2e:	e0 e6       	ldi	r30, 0x60	; 96
    1b30:	f6 e0       	ldi	r31, 0x06	; 6
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	85 83       	std	Z+5, r24	; 0x05
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	86 83       	std	Z+6, r24	; 0x06
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	0f 2e       	mov	r0, r31
    1b40:	f0 e4       	ldi	r31, 0x40	; 64
    1b42:	ef 2e       	mov	r14, r31
    1b44:	f6 e0       	ldi	r31, 0x06	; 6
    1b46:	ff 2e       	mov	r15, r31
    1b48:	f0 2d       	mov	r31, r0
    1b4a:	00 e6       	ldi	r16, 0x60	; 96
    1b4c:	16 e0       	ldi	r17, 0x06	; 6
    1b4e:	cc 24       	eor	r12, r12
    1b50:	c3 94       	inc	r12
    1b52:	c0 e0       	ldi	r28, 0x00	; 0
    1b54:	d6 e0       	ldi	r29, 0x06	; 6
    1b56:	f7 01       	movw	r30, r14
    1b58:	d0 84       	ldd	r13, Z+8	; 0x08
    1b5a:	d8 16       	cp	r13, r24
    1b5c:	49 f0       	breq	.+18     	; 0x1b70 <main+0x84>
    1b5e:	e0 91 8c 21 	lds	r30, 0x218C
    1b62:	f0 91 8d 21 	lds	r31, 0x218D
    1b66:	d4 82       	std	Z+4, r13	; 0x04
    1b68:	b8 84       	ldd	r11, Y+8	; 0x08
    1b6a:	b2 12       	cpse	r11, r18
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <main+0x8a>
    1b6e:	0c c0       	rjmp	.+24     	; 0x1b88 <main+0x9c>
    1b70:	b8 84       	ldd	r11, Y+8	; 0x08
    1b72:	b2 16       	cp	r11, r18
    1b74:	21 f1       	breq	.+72     	; 0x1bbe <main+0xd2>
    1b76:	e0 91 8c 21 	lds	r30, 0x218C
    1b7a:	f0 91 8d 21 	lds	r31, 0x218D
    1b7e:	8b 2d       	mov	r24, r11
    1b80:	86 95       	lsr	r24
    1b82:	86 95       	lsr	r24
    1b84:	86 95       	lsr	r24
    1b86:	85 83       	std	Z+5, r24	; 0x05
    1b88:	f8 01       	movw	r30, r16
    1b8a:	c6 82       	std	Z+6, r12	; 0x06
    1b8c:	80 91 8c 21 	lds	r24, 0x218C
    1b90:	90 91 8d 21 	lds	r25, 0x218D
    1b94:	0e 94 91 01 	call	0x322	; 0x322 <udi_hid_generic_send_report_in>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	85 35       	cpi	r24, 0x55	; 85
    1ba0:	f0 ed       	ldi	r31, 0xD0	; 208
    1ba2:	9f 07       	cpc	r25, r31
    1ba4:	d9 f7       	brne	.-10     	; 0x1b9c <main+0xb0>
    1ba6:	e0 91 8c 21 	lds	r30, 0x218C
    1baa:	f0 91 8d 21 	lds	r31, 0x218D
    1bae:	12 82       	std	Z+2, r1	; 0x02
    1bb0:	13 82       	std	Z+3, r1	; 0x03
    1bb2:	14 82       	std	Z+4, r1	; 0x04
    1bb4:	15 82       	std	Z+5, r1	; 0x05
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	c5 82       	std	Z+5, r12	; 0x05
    1bba:	2b 2d       	mov	r18, r11
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <main+0xd4>
    1bbe:	2b 2d       	mov	r18, r11
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	01 96       	adiw	r24, 0x01	; 1
    1bc6:	85 35       	cpi	r24, 0x55	; 85
    1bc8:	f0 ed       	ldi	r31, 0xD0	; 208
    1bca:	9f 07       	cpc	r25, r31
    1bcc:	d9 f7       	brne	.-10     	; 0x1bc4 <main+0xd8>
    1bce:	8d 2d       	mov	r24, r13
    1bd0:	c2 cf       	rjmp	.-124    	; 0x1b56 <main+0x6a>

00001bd2 <my_callback_generic_enable>:
}

static bool my_flag_autorize_generic_events = false;
bool my_callback_generic_enable(void)
{
	my_flag_autorize_generic_events = true;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	80 93 75 21 	sts	0x2175, r24
	return true;
}
    1bd8:	08 95       	ret

00001bda <my_callback_generic_disable>:
void my_callback_generic_disable(void)
{
	my_flag_autorize_generic_events = false;
    1bda:	10 92 75 21 	sts	0x2175, r1
    1bde:	08 95       	ret

00001be0 <my_callback_generic_report_out>:
}

void my_callback_generic_report_out(uint8_t *report)
{
    1be0:	08 95       	ret

00001be2 <my_callback_generic_set_feature>:
	(report[1] == MY_VALUE_1)) {
		// The report is correct
	}*/
}
void my_callback_generic_set_feature(uint8_t *report_feature)
{
    1be2:	08 95       	ret

00001be4 <__udivmodhi4>:
    1be4:	aa 1b       	sub	r26, r26
    1be6:	bb 1b       	sub	r27, r27
    1be8:	51 e1       	ldi	r21, 0x11	; 17
    1bea:	07 c0       	rjmp	.+14     	; 0x1bfa <__udivmodhi4_ep>

00001bec <__udivmodhi4_loop>:
    1bec:	aa 1f       	adc	r26, r26
    1bee:	bb 1f       	adc	r27, r27
    1bf0:	a6 17       	cp	r26, r22
    1bf2:	b7 07       	cpc	r27, r23
    1bf4:	10 f0       	brcs	.+4      	; 0x1bfa <__udivmodhi4_ep>
    1bf6:	a6 1b       	sub	r26, r22
    1bf8:	b7 0b       	sbc	r27, r23

00001bfa <__udivmodhi4_ep>:
    1bfa:	88 1f       	adc	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	5a 95       	dec	r21
    1c00:	a9 f7       	brne	.-22     	; 0x1bec <__udivmodhi4_loop>
    1c02:	80 95       	com	r24
    1c04:	90 95       	com	r25
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	08 95       	ret

00001c0c <__tablejump2__>:
    1c0c:	ee 0f       	add	r30, r30
    1c0e:	ff 1f       	adc	r31, r31

00001c10 <__tablejump__>:
    1c10:	05 90       	lpm	r0, Z+
    1c12:	f4 91       	lpm	r31, Z
    1c14:	e0 2d       	mov	r30, r0
    1c16:	09 94       	ijmp

00001c18 <memcpy>:
    1c18:	fb 01       	movw	r30, r22
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <memcpy+0xa>
    1c1e:	01 90       	ld	r0, Z+
    1c20:	0d 92       	st	X+, r0
    1c22:	41 50       	subi	r20, 0x01	; 1
    1c24:	50 40       	sbci	r21, 0x00	; 0
    1c26:	d8 f7       	brcc	.-10     	; 0x1c1e <memcpy+0x6>
    1c28:	08 95       	ret

00001c2a <_exit>:
    1c2a:	f8 94       	cli

00001c2c <__stop_program>:
    1c2c:	ff cf       	rjmp	.-2      	; 0x1c2c <__stop_program>
